{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to my website https://Robert-Sen.github.io/</p>"},{"location":"ABOUT/","title":"About","text":""},{"location":"ABOUT/Site-build/","title":"Build","text":"<p>Build by Material for MkDocs</p>"},{"location":"DEV/","title":"Dev","text":""},{"location":"DEV/xv6-rust/","title":"Rust \u91cd\u5199 xv6","text":""},{"location":"DEV/xv6-rust/#_1","title":"\u7b80\u4ecb","text":"<p>\u672c\u9879\u76ee\u4e3a\u4f7f\u7528 Rust \u8bed\u8a00\u91cd\u65b0\u5b9e\u73b0 xv6\u3002 \u5f00\u53d1\u8def\u7ebf\u662f\u6cbf\u7740 rCore-Tutorial-Book \u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u4f1a\u91c7\u7528\u5176\u4e2d\u6bd4\u8f83\u4f18\u79c0\u7684\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u4f46\u4ecd\u4ee5 xv6 \u4e3a\u6838\u5fc3\u3002</p>"},{"location":"DEV/xv6-rust/#_2","title":"\u8fdb\u5ea6","text":"<ul> <li> <p> 2023-1: \u6784\u5efa\u4e00\u4e2a\u53bb\u9664\u6807\u51c6\u5e93\u4f9d\u8d56\u7684\u6700\u5c0f\u7cfb\u7edf\uff0c\u652f\u6301\u6807\u51c6\u8f93\u51fa\u3002</p> </li> <li> <p> 2023-2: \u6279\u5904\u7406\u7cfb\u7edf\uff0c\u652f\u6301 S/U \u7279\u6743\u7ea7\u5207\u6362\uff0c\u652f\u6301\u4efb\u52a1\u7684\u81ea\u52a8\u52a0\u8f7d\u3001\u5207\u6362\u3001\u6267\u884c\u3002</p> <ul> <li> \u5355\u9053\u6279\u5904\u7406\u7cfb\u7edf\uff0c\u652f\u6301\u7528\u6237\u7a0b\u5e8f\u7cfb\u7edf\u8c03\u7528\uff0c\u5185\u6838\u7684 trap \u5904\u7406\uff0c\u4ee5\u53ca\u4efb\u52a1\u7684\u5207\u6362\u53ca\u9000\u51fa\u3002</li> <li> \u591a\u9053\u6279\u5904\u7406\u7cfb\u7edf\uff0c\u5185\u6838\u5728\u521d\u59cb\u5316\u65f6\u4f1a\u628a\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u52a0\u8f7d\u8fdb\u5165\u5185\u5b58\uff0c\u91c7\u7528\u56fa\u5b9a\u5206\u533a\u6cd5\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u4e3b\u52a8\u653e\u5f03 CPU\uff0c\u672c\u8d28\u8fd8\u662f\u5355\u9053\u7cfb\u7edf\u3002</li> <li> \u591a\u9053\u5206\u65f6\u7cfb\u7edf\uff0c\u8bbe\u7f6e\u4e86\u65f6\u949f\u4e2d\u65ad\uff0c\u89e6\u53d1\u65f6\u4f1a\u81ea\u52a8\u8fdb\u884c\u4efb\u52a1\u8c03\u5ea6\uff0c\u91c7\u7528\u8f6e\u8f6c\u8c03\u5ea6\u6cd5\u3002</li> </ul> </li> <li> <p> 2023-3: \u5185\u5b58\u7ba1\u7406\uff0c\u8bbe\u7f6e\u865a\u62df\u5185\u5b58\u673a\u5236\uff0c\u5206\u9875\u5f0f\u7ba1\u7406</p> <ul> <li> \u5b9e\u73b0 Rust \u8bed\u8a00\u672c\u8eab\u7684\u5168\u5c40\u5206\u914d\u5668</li> <li> \u5b9e\u73b0\u7269\u7406\u9875\u9762\u7ba1\u7406\uff0c\u91c7\u7528\u94fe\u5f0f\u7ec4\u7ec7\u7269\u7406\u9875</li> <li> \u5b9e\u73b0\u5185\u6838\u9875\u8868</li> <li> \u5b9e\u73b0\u7528\u6237\u9875\u8868</li> <li> \u5b9e\u73b0 ELF \u89e3\u6790\u5668\uff0c\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u5230\u7528\u6237\u5185\u5b58</li> <li> \u5b9e\u73b0\u57fa\u4e8e\u865a\u62df\u5185\u5b58\u7684\u5e94\u7528\u7ba1\u7406\u5668</li> </ul> </li> </ul>"},{"location":"DEV/xv6-rust/23-1/","title":"1\u6708","text":""},{"location":"DEV/xv6-rust/23-1/#12","title":"12\u53f7","text":""},{"location":"DEV/xv6-rust/23-1/#rust","title":"Rust \u8bed\u8a00\u76f8\u5173\u9879","text":"<ul> <li>\u9996\u5148\u6211\u4eec\u4f7f\u7528 RustSBI ( \u6b64\u540e\u7b80\u79f0SBI ) \u63d0\u4f9b\u7684\u63a5\u53e3\u5c01\u88c5\u4e86\u4e24\u4e2a\u51fd\u6570 <code>console_putchar(usize)</code> \u548c <code>shutdown()</code>\uff0c\u5373\u5411\u63a7\u5236\u53f0\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u548c\u5173\u673a\u7684\u529f\u80fd\u3002</li> <li>\u5728\u6b64\u57fa\u7840\u4e4b\u4e0a\u6211\u4eec\u518d\u8c03\u7528\u8fd9\u4e24\u4e2a\u51fd\u6570\u5b9e\u73b0 Rust \u7684\u6807\u51c6\u8f93\u51fa <code>print</code>  \u4ee5\u53ca <code>println</code> \u5b8f\u5373\u53ef\u4ee5\u5b9e\u73b0\u683c\u5f0f\u5316\u8f93\u51fa\u3002</li> <li>\u7136\u540e\u5b9e\u73b0 Rust \u7684 <code>panic_handler</code> \u4ee5\u5728\u7a0b\u5e8f panic \u65f6\u8fdb\u884c\u5b9a\u4f4d\u3002</li> </ul>"},{"location":"DEV/xv6-rust/23-1/#_1","title":"\u5185\u6838\u76f8\u5173\u9879","text":"<ul> <li>\u7531\u4e8e\u53bb\u9664\u4e86\u6807\u51c6\u5e93\u4e0e main \u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u624b\u52a8\u6307\u660e\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u4e3a <code>_start</code>\uff0c\u8fd9\u662f\u4e00\u6bb5\u6c47\u7f16\u7a0b\u5e8f     <pre><code>    .section .text.entry\n    .globl _start\n\n_start:\n    la sp, boot_stack_top   # \u8bbe\u7f6e\u5806\u6808\u4ee5\u652f\u6301\u51fd\u6570\u8c03\u7528\n    call rust_main          # \u8df3\u8f6c\u5230 Rust \u5165\u53e3\u51fd\u6570\n\n    .section .bss.stack\n    .globl boot_stack_lower_bound\nboot_stack_lower_bound:\n    .space 4096 * 16\n    .globl boot_stack_top\nboot_stack_top:\n</code></pre></li> <li>\u5728 <code>rust_main</code> \u4e2d\u6211\u4eec\u9996\u5148\u6e05\u7406 <code>.bss</code> \u6570\u636e\u6bb5\uff0c\u8fd9\u91cc\u4fdd\u5b58\u4e86\u672a\u521d\u59cb\u5316\u6216\u5e94\u8be5\u521d\u59cb\u5316\u4e3a0\u7684\u6570\u636e\uff0c\u5185\u6838\u9700\u8981\u5c06\u8fd9\u4e2a\u6570\u636e\u6bb5\u521d\u59cb\u5316\u4e3a0\u3002     <pre><code>fn clear_bss() {\n    extern \"C\" {\n        // \u5e76\u4e0d\u5b58\u5728\u8fd9\u4e24\u4e2a\u5916\u90e8\u51fd\u6570\n        // \u8fd9\u91cc\u53ea\u662f\u5f15\u7528linker.ld\u91cc\u7684\u7b26\u53f7\u4ee5\u4fbf\u4f7f\u7528\n        fn sbss();\n        fn ebss();\n    }\n    (sbss as usize..ebss as usize).for_each(|x| {\n        unsafe { (x as *mut u8).write_volatile(0)}\n    });\n}\n</code></pre></li> <li>\u7136\u540e\u6253\u5370\u4e00\u884c Hello World\uff0c\u4e4b\u540e\u5173\u673a <pre><code>#[no_mangle]\npub fn rust_main() -&gt; ! {\n    clear_bss();\n    println!(\"Hello World!\");\n    panic!(\"Shutdown machine!\");\n}\n</code></pre></li> </ul>"},{"location":"DEV/xv6-rust/23-1/#_2","title":"\u6784\u5efa","text":"<ul> <li>\u94fe\u63a5\u811a\u672c   \u5728\u8fd9\u91cc\u6211\u4eec\u6307\u660e\u6574\u4e2a\u5185\u6838\u7684\u5165\u53e3\u4e3a<code>_start</code>\u4ee5\u53ca\u7a0b\u5e8f\u6bb5\u548c\u6570\u636e\u6bb5\u7684\u4f4d\u7f6e\u7b49\u4fe1\u606f\u3002     <pre><code>OUTPUT_ARCH(riscv)\nENTRY(_start)\nBASE_ADDRESS = 0x80200000;\n\nSECTIONS\n{\n    . = BASE_ADDRESS;\n    skernel = .;\n\n    stext = .;\n    .text : {\n        *(.text.entry)\n        *(.text .text.*)\n    }\n\n    . = ALIGN(4K);\n    etext = .;\n    srodata = .;\n    .rodata : {\n        *(.rodata .rodata.*)\n        *(.srodata .srodata.*)\n    }\n\n    . = ALIGN(4K);\n    erodata = .;\n    sdata = .;\n    .data : {\n        *(.data .data.*)\n        *(.sdata .sdata.*)\n    }\n\n    . = ALIGN(4K);\n    edata = .;\n    .bss : {\n        *(.bss.stack)\n        sbss = .;\n        *(.bss .bss.*)\n        *(.sbss .sbss.*)\n    }\n\n    . = ALIGN(4K);\n    ebss = .;\n    ekernel = .;\n\n    /DISCARD/ : {\n        *(.eh_frame)\n    }\n}\n</code></pre></li> <li>Makefile<ol> <li><code>cargo build</code> \u5f97\u5230\u5185\u6838\u7684 elf \u53ef\u6267\u884c\u6587\u4ef6\uff0c</li> <li><code>rust-objcopy</code> \u4e22\u5f03\u5143\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u5185\u6838\u955c\u50cf</li> <li>\u52a0\u8f7d\u5230 qemu \u4e2d\u5373\u53ef\u542f\u52a8\u5185\u6838\u3002</li> </ol> </li> </ul>"},{"location":"DEV/xv6-rust/23-1/#_3","title":"\u8fd0\u884c\u7ed3\u679c","text":"<pre><code>[rustsbi] RustSBI version 0.3.0-alpha.4, adapting to RISC-V SBI v1.0.0\n.______       __    __      _______.___________.  _______..______   __\n|   _  \\     |  |  |  |    /       |           | /       ||   _  \\ |  |\n|  |_)  |    |  |  |  |   |   (----`---|  |----`|   (----`|  |_)  ||  |\n|      /     |  |  |  |    \\   \\       |  |      \\   \\    |   _  &lt; |  |\n|  |\\  \\----.|  `--'  |.----)   |      |  |  .----)   |   |  |_)  ||  |\n| _| `._____| \\______/ |_______/       |__|  |_______/    |______/ |__|\n[rustsbi] Implementation     : RustSBI-QEMU Version 0.2.0-alpha.2\n[rustsbi] Platform Name      : riscv-virtio,qemu\n[rustsbi] Platform SMP       : 1\n[rustsbi] Platform Memory    : 0x80000000..0x88000000\n[rustsbi] Boot HART          : 0\n[rustsbi] Device Tree Region : 0x87000000..0x87000ef2\n[rustsbi] Firmware Address   : 0x80000000\n[rustsbi] Supervisor Address : 0x80200000\n[rustsbi] pmp01: 0x00000000..0x80000000 (-wr)\n[rustsbi] pmp02: 0x80000000..0x80200000 (---)\n[rustsbi] pmp03: 0x80200000..0x88000000 (xwr)\n[rustsbi] pmp04: 0x88000000..0x00000000 (-wr)\nHello World!\nPanicked at src/main.rs:18 Shutdown machine!\n</code></pre> <p>Success</p> <p>\u542f\u52a8\u6210\u529f\uff01</p>"},{"location":"DEV/xv6-rust/23-2/","title":"2\u6708","text":""},{"location":"DEV/xv6-rust/23-2/#11","title":"11\u53f7","text":""},{"location":"DEV/xv6-rust/23-2/#_1","title":"\u51e0\u4e2a\u7528\u6237\u5e94\u7528\u7a0b\u5e8f","text":"<ol> <li>\u6253\u5370\u4e00\u884c \"Hello World\"\uff0c\u7528\u4e8e\u6d4b\u8bd5\u7cfb\u7edf\u8c03\u7528\u3002</li> <li>\u5c1d\u8bd5\u8bbf\u95ee\u4e00\u4e2a\u975e\u6cd5\u5730\u5740\uff0c\u5185\u6838\u5e94\u8be5\u6740\u6b7b\u8fd9\u4e2a\u7a0b\u5e8f\u3002</li> <li>\u4e0d\u65ad\u8fdb\u884c\u8ba1\u7b97\u548c\u8f93\u51fa\uff0c\u5e94\u8be5\u80fd\u591f\u4e0d\u65ad\u5728\u7528\u6237\u548c\u5185\u6838\u4e4b\u95f4\u5207\u6362\u800c\u4e0d\u81f3\u4e8e\u53d1\u751f\u9519\u4e71\u3002</li> </ol>"},{"location":"DEV/xv6-rust/23-2/#qemu-linux","title":"\u5728 qemu \u6a21\u62df\u7684 linux \u73af\u5883\u4e0b\u8fd0\u884c","text":"<p><pre><code>--------------------\ntest:  0hello_world\nHello World!\n--------------------\ntest:  1store_fault\nSegmentation fault\n--------------------\ntest:  2fibonacci\na3 = 2\na4 = 3\na5 = 5\na6 = 8\na7 = 13\na8 = 21\na9 = 34\na10 = 55\na11 = 89\na12 = 144\na13 = 233\na14 = 377\na15 = 610\na16 = 987\n</code></pre> \u8fd0\u884c\u7ed3\u679c\u4e8e\u9884\u671f\u4e00\u81f4\u3002</p>"},{"location":"DEV/xv6-rust/23-2/#18","title":"18\u53f7","text":""},{"location":"DEV/xv6-rust/23-2/#us","title":"\u7279\u6743\u7ea7 U/S \u5207\u6362","text":"<ul> <li>\u5b9a\u4e49\u7528\u6237\u6808 \uff08<code>UserStack</code>\uff09\u548c\u5185\u6838\u6808\uff08<code>KernelStack</code>\uff09\u4ee5\u652f\u6301\u51fd\u6570\u8c03\u7528\uff0c\u5176\u5927\u5c0f\u5747\u4e3a <code>2*4096</code> \u5b57\u8282\u3002</li> <li>\u5b9a\u4e49\u7ed3\u6784 <code>TrapContext</code> \u7528\u4e8e\u5728 trap \u5904\u7406\u65f6\u4fdd\u5b58\u7528\u6237\u7a0b\u5e8f\u7684\u5bc4\u5b58\u5668\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u8fd9\u4e2a\u7ed3\u6784\u4fdd\u5b58\u5728\u5185\u6838\u6808\u4e2d\uff0c\u4ee5\u4fbf\u5728 trap \u5904\u7406\u5b8c\u6210\u540e\u6062\u590d\u7528\u6237\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u3002</li> <li>\u7f16\u5199 trap \u5904\u7406\u5165\u53e3\u7a0b\u5e8f <code>trap.S</code>\uff0c\u529f\u80fd\u662f\u4fdd\u5b58\u6216\u6062\u590d\u7528\u6237 context\u3002</li> <li>\u5b9e\u73b0 trap \u5904\u7406 <code>user_trap_handler</code>\uff0c\u5bf9\u7528\u6237\u7cfb\u7edf\u8c03\u7528\u6216\u5f02\u5e38\u8fdb\u884c\u5904\u7406\u3002</li> <li>\u5b9e\u73b0\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406\u5668 <code>AppManager</code>\uff0c\u4ee5\u52a0\u8f7d\u548c\u8fd0\u884c\u7a0b\u5e8f\u3002</li> </ul>"},{"location":"DEV/xv6-rust/23-2/#_2","title":"\u8fd0\u884c\u7ed3\u679c","text":"<pre><code>[kernel] Hello world!\n[kernel] Application infomations.\n[kernel] app_num: 3\n[kernel] app_0: 0x8020b028..0x8020c5b8\n[kernel] app_1: 0x8020c5b8..0x8020db40\n[kernel] app_2: 0x8020db40..0x8020f148\n[kernel] Loading app_0\nHello World!\nPanicked at src/trap/mod.rs:42, Unsupported trap Exception(InstructionFault), stval = 0x0!\n</code></pre> <p>Failure</p> <p>\u5728\u7b2c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6210\u529f\u6253\u5370\u4e86 \"Hello World!\" (\u7cfb\u7edf\u8c03\u7528) \u540e\uff0c\u5185\u6838 panic \u6389\u4e86\uff0c\u53ef\u80fd\u662f\u5728 trap \u8fd4\u56de\u65f6\u51fa\u4e86\u95ee\u9898, \u5f85\u89e3\u51b3\u3002</p>"},{"location":"DEV/xv6-rust/23-2/#19","title":"19\u53f7","text":""},{"location":"DEV/xv6-rust/23-2/#debug","title":"debug","text":"<p>\u4ed4\u7ec6\u5206\u6790\u4e86\u4e00\u4e0b\u6574\u4e2a trap \u6d41\u7a0b\uff0c\u53d1\u73b0 user_trap_handler \u65e0\u6cd5\u6b63\u5e38\u8fd4\u56de\u3002 <pre><code>user_trap:\n    ...\n    #jump to user_trap_handler() not return\n    j user_trap_handler\n\n# user_trap_handler() will return here\nuser_return:\n    ...\n</code></pre></p> <ul> <li> <p>\u539f\u56e0\u5728\u4e8e <code>user_trap</code> \u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u662f\u76f4\u63a5\u8df3\u8f6c\u800c\u4e0d\u662f\u51fd\u6570\u8c03\u7528\uff0c\u5bfc\u81f4\u5728 <code>user_trap_hanbler</code> \u6267\u884c\u5b8c\u6bd5\u540e\u4e0d\u77e5\u9053\u8be5\u8fd4\u56de\u5230\u54ea\uff0c\u6216\u8005\u8fd4\u56de\u5230\u4e86\u4e00\u4e2a\u975e\u6cd5\u5730\u5740\uff0c\u4ece\u800c\u89e6\u53d1\u4e86\u5185\u6838 panic\u3002  </p> </li> <li> <p>\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u66f4\u6539 <code>user_trap</code> \u7684\u6700\u540e\u4e00\u6761\u6307\u4ee4\u4e3a <code>j user_trap_handler</code>\u3002\u7136\u540e\u8ba9 <code>user_trap_handler</code> \u8fd4\u56de\u7528\u6237\u7684 <code>TrapContext</code> \u7684\u6307\u9488\uff0c\u4ee5\u4fbf\u5728 <code>user_return</code> \u65f6\u6062\u590d\u3002</p> </li> </ul>"},{"location":"DEV/xv6-rust/23-2/#makefile","title":"\u91cd\u5199 Makefile","text":"<p>Question</p> <p>\u5728\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u6211\u66f4\u6539\u4e86\u67d0\u4e9b\u6e90\u6587\u4ef6\u540e\uff0c\u518d\u6b21\u6267\u884c <code>make</code>\uff0c\u6211\u7684\u9879\u76ee\u5e76\u4e0d\u4f1a\u91cd\u65b0\u6784\u5efa\u3002</p> <p>\u8003\u8651\u6709\u4f9d\u8d56\u5173\u7cfb\uff1a<code>src -&gt; obj -&gt; dst</code> src \u662f\u5e95\u5c42\u6e90\u6587\u4ef6\uff0cdst \u662f\u9876\u5c42\u76ee\u6807\uff0cobj \u662f\u4e2d\u95f4\u4f9d\u8d56  </p> <ul> <li>\u5982\u679c obj \u662f\u4e00\u4e2a\u5b9e\u4f53\u76ee\u6807\u7684\u8bdd\uff0c\u90a3\u4e48\u5728\u67d0\u6b21\u6784\u5efa\u540e\uff0c\u6211\u4eec\u82e5\u5bf9 src \u8fdb\u884c\u4e86\u4fee\u6539\u3002\u4e4b\u540e\u518d\u8fdb\u884c\u6784\u5efa\u7684\u65f6\u5019\uff0cdst \u81ea\u4e0a\u5411\u4e0b\u5bfb\u627e\u4f9d\u8d56\u4f1a\u53d1\u73b0 obj \u4f9d\u8d56\u9879\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u4e0d\u4f1a\u8fdb\u884c\u91cd\u65b0\u6784\u5efa\u3002</li> <li>\u6240\u4ee5\u4e3a\u4e86\u4fdd\u8bc1\u5e95\u5c42\u6e90\u6587\u4ef6\u80fd\u591f\u88ab\u68c0\u67e5\u5230\u662f\u5426\u53d8\u5316\uff0c\u6211\u4eec\u7684\u4e2d\u95f4\u4f9d\u8d56\u9879\u5c31\u4e0d\u80fd\u662f\u5b9e\u4f53\u76ee\u6807\uff0c\u800c\u5e94\u8be5\u662f<code>\u4f2a\u76ee\u6807</code>\uff0c\u4e5f\u5c31\u662f\u5fc5\u5b9a\u4f1a\u6267\u884c\u547d\u4ee4\u7684\u76ee\u6807\u3002</li> </ul>"},{"location":"DEV/xv6-rust/23-2/#_3","title":"\u8fd0\u884c\u7ed3\u679c","text":"<pre><code>[kernel] Hello world!\n[kernel] Application infomations.\n[kernel] app_num: 3\n[kernel] app_0: 0x8020a028..0x8020b510\n[kernel] app_1: 0x8020b510..0x8020ca40\n[kernel] app_2: 0x8020ca40..0x8020dff0\n[kernel] Loading app_0\nHello World!\n[kernel] Application exited with code 0\n[kernel] Loading app_1\n[kernel] PageFault in application, kernel killed it.\n[kernel] Loading app_2\na3 = 2\na4 = 3\na5 = 5\na6 = 8\na7 = 13\na8 = 21\na9 = 34\na10 = 55\na11 = 89\na12 = 144\na13 = 233\na14 = 377\na15 = 610\na16 = 987\n[kernel] Application exited with code 0\nAll applications completed!\nThe machine will shutdown!\n</code></pre> <p>Success</p> <p>\u8fd0\u884c\u7ed3\u679c\u7b26\u5408\u9884\u671f\u3002\u81f3\u6b64\uff0c\u5355\u9053\u6279\u5904\u7406\u7cfb\u7edf\u5b8c\u6210\u3002</p>"},{"location":"DEV/xv6-rust/23-2/#23","title":"23\u53f7","text":""},{"location":"DEV/xv6-rust/23-2/#_4","title":"\u591a\u9053\u7cfb\u7edf\u7684\u5e94\u7528\u7a0b\u5e8f","text":"<ul> <li>\u6211\u4eec\u91c7\u7528\u56fa\u5b9a\u5206\u533a\u6cd5\u4e3a\u5e94\u7528\u5206\u914d\u5185\u5b58\u3002\u4ece 0x80400000 \u5f00\u59cb\u4e3a\u7528\u6237\u533a\uff0c\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5206\u914d 0x20000 \u5927\u5c0f\u7684\u5185\u5b58\uff0c\u6700\u5927\u5e94\u7528\u7a0b\u5e8f\u6570\u91cf\u4e3a16\u4e2a\u3002  </li> <li>\u4e3a\u4e86\u7a0b\u5e8f\u80fd\u591f\u6b63\u786e\u7684\u52a0\u8f7d\u548c\u6267\u884c\uff0c\u6211\u4eec\u8981\u4fdd\u8bc1\u5e94\u7528\u548c\u5185\u6838\u91c7\u7528\u8fd9\u4e00\u76f8\u540c\u7684\u534f\u8bae\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u662f\u4e0d\u540c\u4e14\u552f\u4e00\u7684\uff0c\u6240\u4ee5\u539f\u6765\u7684\u7edf\u4e00\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u94fe\u63a5\u65b9\u5f0f\u4e0d\u518d\u9002\u7528\uff0c\u8981\u4e3a\u6bcf\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e00\u4e2a\u72ec\u7acb\u7684\u94fe\u63a5\u811a\u672c\uff0c\u53ef\u4ee5\u91c7\u7528 python \u811a\u672c\u6765\u5b8c\u6210\u8fd9\u4e00\u8fc7\u7a0b\u3002</li> </ul>"},{"location":"DEV/xv6-rust/23-2/#_5","title":"\u5e94\u7528\u7ba1\u7406\u5668","text":"<ul> <li>\u5e94\u7528\u7ba1\u7406\u5668\u521d\u59cb\u5316\u65f6\u4f9d\u6b21\u5c06\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u52a0\u8f7d\u5230 0x80400000, 0x80420000... \u3002</li> </ul>"},{"location":"DEV/xv6-rust/23-2/#_6","title":"\u8fd0\u884c\u7ed3\u679c","text":"<pre><code>[kernel] Hello world!\n[kernel] Application infomations.\n[kernel] app_num: 3\n[kernel] app_0: 0x8020b028..0x8020c628\n[kernel] app_1: 0x8020c628..0x8020dc28\n[kernel] app_2: 0x8020dc28..0x8020f228\n[kernel] loading task1: 0x80400000..0x80420000\n[kernel] loading task2: 0x80420000..0x80440000\n[kernel] loading task3: 0x80440000..0x80460000\n[kernel] task1 running\n[task1] 3 power 1 = 3\n[task1] 3 power 2 = 9\n[task1] 3 power 3 = 27\n[task1] 3 power 4 = 81\n[task1] 3 power 5 = 243\n[task1] 3 power 6 = 729\n[task1] 3 power 7 = 2187\n[task1] 3 power 8 = 6561\n[task1] 3 power 9 = 19683\n[task1] 3 power 10 = 59049\n[kernel] Application exited with code 0\n[kernel] task2 running\n[task2] 5 power 1 = 5\n[task2] 5 power 2 = 25\n[task2] 5 power 3 = 125\n[task2] 5 power 4 = 625\n[task2] 5 power 5 = 3125\n[task2] 5 power 6 = 15625\n[task2] 5 power 7 = 78125\n[task2] 5 power 8 = 390625\n[task2] 5 power 9 = 1953125\n[task2] 5 power 10 = 9765625\n[kernel] Application exited with code 0\n[kernel] task3 running\n[task3] 7 power 1 = 7\n[task3] 7 power 2 = 49\n[task3] 7 power 3 = 343\n[task3] 7 power 4 = 2401\n[task3] 7 power 5 = 16807\n[task3] 7 power 6 = 117649\n[task3] 7 power 7 = 823543\n[task3] 7 power 8 = 5764801\n[task3] 7 power 9 = 40353607\n[task3] 7 power 10 = 282475249\n[kernel] Application exited with code 0\n[kernel] all tasks completed\n[kernel] machine will shutdown\n</code></pre> <p>Success</p> <p>\u7b2c7\u52309\u884c\uff0c\u53ef\u4ee5\u770b\u5230\u5185\u6838\u521d\u59cb\u5316\u4e4b\u524d\u5c06\u5404\u4e2a\u5e94\u7528\u7a0b\u5e8f\u52a0\u8f7d\u5230\u4e86\u6307\u5b9a\u4f4d\u7f6e\u3002</p>"},{"location":"DEV/xv6-rust/23-2/#25","title":"25\u53f7","text":""},{"location":"DEV/xv6-rust/23-2/#_7","title":"2\u6708","text":""},{"location":"DEV/xv6-rust/23-3/","title":"3\u6708","text":""},{"location":"DEV/xv6-rust/23-3/#3_1","title":"3\u53f7","text":""},{"location":"DEV/xv6-rust/23-3/#rust","title":"Rust\u5806\u5206\u914d\u5668","text":"<ul> <li>\u5b9e\u73b0\u4e86 Rust \u7684 <code>global allocator</code>\uff0c\u5373\u5185\u6838\u5806\u5206\u914d\u5668\uff0c\u6211\u4eec\u80fd\u591f\u4f7f\u7528\u4e00\u4e9b\u52a8\u6001\u5927\u5c0f\u7684\u5bb9\u5668\uff0c\u5982 <code>Vec</code> \u548c <code>Box</code>\u3002</li> <li>\u7531\u4e8e\u8fd9\u4e00\u90e8\u5206\u662f\u4e0e Rust \u76f8\u5173\uff0c\u800c\u4e0e\u5185\u6838\u65e0\u5173\u7684\u6a21\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u5df2\u6709\u7684 <code>buddy_system_allocator</code> \u5e93\u5373\u53ef\u3002</li> </ul>"},{"location":"DEV/xv6-rust/23-3/#_1","title":"3\u6708","text":""},{"location":"ESSAY/","title":"Essay","text":""},{"location":"NOTES/","title":"Notes","text":""},{"location":"NOTES/Linux/Git/Git-usage/","title":"Git \u57fa\u672c\u7528\u6cd5","text":""},{"location":"NOTES/Linux/Git/Git-usage/#git-merge","title":"git merge","text":"<pre><code>git merge &lt;\u5206\u652f\u540d&gt; --allow-unrelated-histories  # \u5141\u8bb8\u5408\u5e76\u4e0d\u76f8\u5173\u7684\u5206\u652f\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Set-proxy-for-WSL2/","title":"WSL2 \u4e0b\u914d\u7f6e\u4ee3\u7406","text":""},{"location":"NOTES/Linux/Ubuntu/Set-proxy-for-WSL2/#1","title":"1. \u4fee\u6539\u9632\u706b\u5899\u89c4\u5219","text":"<p>\u5f00\u653e\u7cfb\u7edf\u5bf9 WSL2 \u7684\u5c40\u57df\u7f51\u8bbf\u95ee\u6743\u9650\uff08\u65e0\u6bd2\u65e0\u5bb3\uff09 \u4ee5\u7ba1\u7406\u5458\u6743\u9650\u6253\u5f00 powershell\uff0c\u8f93\u5165\u5982\u4e0b\u547d\u4ee4\uff0c</p> <pre><code>cd C:\\WINDOWS\\system32\nNew-NetFirewallRule -DisplayName \"WSL\" -Direction Inbound  -InterfaceAlias \"vEthernet (WSL)\"  -Action Allow\n</code></pre> <p>\u5141\u8bb8\u4ee3\u7406\u8f6f\u4ef6\u901a\u8fc7\u9632\u706b\u5899 \u5728\u4ee3\u7406\u8f6f\u4ef6\u4e2d\u6253\u5f00\u5c40\u57df\u7f51\u8fde\u63a5\uff0c\u5982\u4e0b\u56fe\uff0c</p> <p></p> <p>\u5728<code>\u8d44\u6e90\u76d1\u89c6\u5668&gt;\u7f51\u7edc</code>\u4e2d\u67e5\u770b\u76d1\u542c\u4ee3\u7406\u7aef\u53e3\u7684\u8fdb\u7a0b\u540d\uff0c\u6211\u7684\u4ee3\u7406\u7aef\u53e3\u662f10086\uff0c\u5982\u4e0b\u56fe\uff0c</p> <p></p> <p>\u5141\u8bb8\u8be5\u8fdb\u7a0b\u901a\u8fc7\u9632\u706b\u5899\uff0c</p> <p></p>"},{"location":"NOTES/Linux/Ubuntu/Set-proxy-for-WSL2/#2-wsl2","title":"2. \u5728 WSL2 \u4e2d\u914d\u7f6e\u4ee3\u7406","text":"<p>\u65b0\u5efa <code>proxy.sh</code>\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>hostip=$(cat /etc/resolv.conf | grep nameserver | awk '{ print $2 }')\nwslip=$(hostname -I | awk '{print $1}')\nport=7890\n\nPROXY_HTTP=\"http://${hostip}:${port}\"\n\nset_proxy(){\n  export http_proxy=\"${PROXY_HTTP}\"\n  export HTTP_PROXY=\"${PROXY_HTTP}\"\n\n  export https_proxy=\"${PROXY_HTTP}\"\n  export HTTPS_proxy=\"${PROXY_HTTP}\"\n\n  export ALL_PROXY=\"${PROXY_SOCKS5}\"\n  export all_proxy=${PROXY_SOCKS5}\n\n  git config --global http.https://github.com.proxy ${PROXY_HTTP}\n  git config --global https.https://github.com.proxy ${PROXY_HTTP}\n\n  echo \"Proxy has been opened.\"\n}\n\nunset_proxy(){\n  unset http_proxy\n  unset HTTP_PROXY\n  unset https_proxy\n  unset HTTPS_PROXY\n  unset ALL_PROXY\n  unset all_proxy\n  git config --global --unset http.https://github.com.proxy\n  git config --global --unset https.https://github.com.proxy\n\n  echo \"Proxy has been closed.\"\n}\n\ntest_setting(){\n  echo \"Host IP:\" ${hostip}\n  echo \"WSL IP:\" ${wslip}\n  echo \"Try to connect to Google...\"\n  resp=$(curl -I -s --connect-timeout 5 -m 5 -w \"%{http_code}\" -o /dev/null www.google.com)\n  if [ ${resp} = 200 ]; then\n    echo \"Proxy setup succeeded!\"\n  else\n    echo \"Proxy setup failed!\"\n  fi\n}\n\nif [ \"$1\" = \"set\" ]\nthen\n  set_proxy\n\nelif [ \"$1\" = \"unset\" ]\nthen\n  unset_proxy\n\nelif [ \"$1\" = \"test\" ]\nthen\n  test_setting\nelse\n  echo \"Unsupported arguments.\"\nfi\n</code></pre> <p>\u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u4ee3\u7406\uff1a <pre><code>source proxy.sh set     # \u6253\u5f00\u4ee3\u7406\nsource proxy.sh unset   # \u5173\u95ed\u4ee3\u7406\nsource proxy.sh test    # \u6d4b\u8bd5\u4ee3\u7406\n</code></pre></p> <p>\u5728 <code>.zshrc</code> \u4e2d\u6dfb\u52a0\u5982\u4e0b\u547d\u4ee4\uff1a<code>alias proxy=\"source proxy.sh\"</code> \u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u8bbe\u7f6e\u4ee3\u7406\uff1a</p> <pre><code>proxy set               # \u6253\u5f00\u4ee3\u7406\nproxy unset             # \u5173\u95ed\u4ee3\u7406\nproxy test              # \u6d4b\u8bd5\u4ee3\u7406\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/","title":"Ubuntu22.04 \u57fa\u672c\u914d\u7f6e","text":""},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#_1","title":"\u6362\u6e90","text":""},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#_2","title":"\u4e2d\u79d1\u5927\u6e90","text":"<pre><code>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#zsh","title":"\u914d\u7f6ezsh","text":""},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#zsh_1","title":"\u5b89\u88c5zsh","text":"<pre><code>sudo apt install zsh\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#shellzsh","title":"\u5207\u6362\u9ed8\u8ba4shell\u5230zsh","text":"<p>\u67e5\u770b\u5f53\u524dshell <pre><code>echo $SHELL\n</code></pre> \u67e5\u770b\u53ef\u7528shell <pre><code>cat /etc/shells\n</code></pre> \u5207\u6362\u5230zsh <pre><code>sudo chsh -s /bin/zsh\n</code></pre></p>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#oh_my_zsh","title":"\u5b89\u88c5oh_my_zsh","text":""},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#_3","title":"\u4e0b\u8f7d","text":"<p>\u901a\u8fc7curl\u5b89\u88c5 <pre><code>sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> \u901a\u8fc7wget\u5b89\u88c5 <pre><code>sh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"\n</code></pre> gitee\u955c\u50cf <pre><code>sh -c \"$(wget -O- https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\"\n</code></pre> termux\u5b89\u88c5 <pre><code>sh -c \"$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)\"\n</code></pre> termux gitee\u955c\u50cf <pre><code>sh -c \"$(curl -fsSL https://html.sqlsec.com/termux-install.sh)\"\n</code></pre></p>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#zshrc","title":"\u66f4\u6539<code>.zshrc</code>\u914d\u7f6e","text":"<pre><code>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#_4","title":"\u63d2\u4ef6\u5b89\u88c5","text":""},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#zsh-autosuggestions","title":"zsh-autosuggestions","text":"<pre><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#zsh-syntax-highlighting","title":"zsh-syntax-highlighting","text":"<pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#powerlevel10k","title":"\u5b89\u88c5powerlevel10k\u4e3b\u9898","text":""},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#_5","title":"\u5b89\u88c5\u4e3b\u9898","text":"<pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n</code></pre>"},{"location":"NOTES/Linux/Ubuntu/Ubuntu22.04-configuration/#zshrc_1","title":"\u4fee\u6539.zshrc","text":"<pre><code>ZSH_THEME=\"powerlevel10k/powerlevel10k\"\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/Filesystem_Hierachy/","title":"Filesystem-ch1","text":"<ul> <li>\u7269\u7406\u78c1\u76d8\uff0c\u53ef\u6301\u4e45\u5316\u5b58\u50a8\u6587\u4ef6</li> <li>buffer cache\uff0c\u7f13\u5b58\u4e86\u78c1\u76d8\u4e2d\u7684\u76d8\u5757\uff0c\u907f\u514d\u9891\u7e41\u8bfb\u53d6\u78c1\u76d8</li> <li>logging\uff0c\u6587\u4ef6\u7cfb\u7edf\u7684\u6301\u4e45\u6027</li> <li>inode cache\uff0c\u7f13\u5b58\u4f7f\u7528\u5230\u7684inode</li> <li>file\uff0c\u7ba1\u7406\u4e0d\u540c\u7c7b\u578b\u6587\u4ef6\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26</li> <li>syscall\uff0c\u6587\u4ef6\u7cfb\u7edf\u63a5\u53e3</li> </ul>"},{"location":"NOTES/OS/Xv6/Filesystem/high_level/","title":"Filesystem-ch2","text":""},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#_1","title":"\u4e00\u4e9b\u7ed3\u6784","text":"<pre><code>// kernle/file.h\n// \u6587\u4ef6\u63a7\u5236\u5757\nstruct file {\n  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;\n  int ref; // reference count\n  char readable;\n  char writable;\n  struct pipe *pipe; // FD_PIPE\n  struct inode *ip;  // FD_INODE and FD_DEVICE\n  uint off;          // FD_INODE\n  short major;       // FD_DEVICE\n};\n</code></pre> <pre><code>// kernel/fs.h\n// \u78c1\u76d8\u7d22\u5f15\u7ed3\u70b9\nstruct dinode {\n  short type;           // File type\n  short major;          // Major device number (T_DEVICE only)\n  short minor;          // Minor device number (T_DEVICE only)\n  short nlink;          // Number of links to inode in file system\n  uint size;            // Size of file (bytes)\n  uint addrs[NDIRECT+1];   // Data block addresses\n};\n#define NDIRECT 12\n</code></pre> <pre><code>// kernel/file.h\n// \u5185\u5b58\u7d22\u5f15\u7ed3\u70b9\nstruct inode {\n  uint dev;           // Device number\n  uint inum;          // Inode number\n  int ref;            // Reference count\n  struct sleeplock lock; // protects everything below here\n  int valid;          // inode has been read from disk?\n\n  short type;         // copy of disk inode\n  short major;\n  short minor;\n  short nlink;\n  uint size;\n  uint addrs[NDIRECT+1];\n};\n</code></pre> <pre><code>// kernel/fs.h\n// \u76ee\u5f55\u9879\nstruct dirent {\n  ushort inum;\n  char name[DIRSIZ];\n};\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#addition","title":"addition","text":"<p>Major number (\u4e3b\u8bbe\u5907\u53f7)</p> <p>Traditionally, the major number identifies the driver associated with the device. A major number can also be shared by multiple device drivers.</p> <p>Minor number (\u6b21\u8bbe\u5907\u53f7)</p> <p>The major number is to identify the corresponding driver. Many devices may use the same major number. So we need to assign the number to each device that is using the same major number.</p> <p></p>"},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#_2","title":"\u76ee\u5f55\u67e5\u8be2","text":"<pre><code>// kernel/fs.c\nstatic struct inode*\nnamex(char *path, int nameiparent, char *name)\n{\n  struct inode *ip, *next;\n\n  if(*path == '/')\n    ip = iget(ROOTDEV, ROOTINO);\n  else\n    ip = idup(myproc()-&gt;cwd);\n\n  while((path = skipelem(path, name)) != 0){\n    ilock(ip);\n    if(ip-&gt;type != T_DIR){\n      iunlockput(ip);\n      return 0;\n    }\n    if(nameiparent &amp;&amp; *path == '\\0'){\n      // Stop one level early.\n      iunlock(ip);\n      return ip;\n    }\n    if((next = dirlookup(ip, name, 0)) == 0){\n      iunlockput(ip);\n      return 0;\n    }\n    iunlockput(ip);\n    ip = next;\n  }\n  if(nameiparent){\n    iput(ip);\n    return 0;\n  }\n  return ip;\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#open","title":"open\u7cfb\u7edf\u8c03\u7528","text":""},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#open_1","title":"open()","text":"<pre><code>void\nls(char *path)\n{\n  char buf[512], *p;\n  int fd;\n\n  if((fd = open(path, 0)) &lt; 0){\n    fprintf(2, \"ls: cannot open %s\\n\", path);\n    return;\n  }\n  ...\n}\n</code></pre> <pre><code>int open(const char* file, int omode);\n</code></pre> <ul> <li> <p>file: \u6587\u4ef6\u540d\uff0c\u76f8\u5bf9\u8def\u5f84\u548c\u7edd\u5bf9\u8def\u5f84</p> </li> <li> <p>omode: \u6253\u5f00\u65b9\u5f0f</p> </li> </ul> omode value \u63cf\u8ff0 O_RDONLY 0 \u53ea\u8bfb O_WRONLY 1&lt;&lt;0 \u53ea\u5199 O_RDWR 1&lt;&lt;1 \u8bfb\u5199 O_CREATE 1&lt;&lt;9 \u65b0\u5efa O_TRUNC 1&lt;&lt;10 \u5220\u9664 <ul> <li>\u8fd4\u56de\u503c: \u4e00\u4e2a\u6574\u6570\u8868\u793a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6253\u5f00\u5931\u8d25\u8fd4\u56de-1</li> </ul>"},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#sys_open","title":"sys_open()","text":"<pre><code>// kernel/sysfile.c\nuint64\nsys_open(void)\n{\n  char path[MAXPATH];\n  int fd, omode;\n  struct file *f;\n  struct inode *ip;\n  int n;\n\n  // \u53d6\u53c2\u6570\n  argint(1, &amp;omode);\n  if((n = argstr(0, path, MAXPATH)) &lt; 0)\n    return -1;\n\n  // \u8868\u793a\u5f00\u59cb\u4e00\u4e2a\u4e8b\u52a1\n  begin_op();\n\n  if(omode &amp; O_CREATE){\n    ip = create(path, T_FILE, 0, 0);\n    if(ip == 0){\n      end_op();\n      return -1;\n    }\n  } \n  // \u4e0d\u9700\u8981\u65b0\u5efa\n  else {\n    // \u83b7\u53d6\u76ee\u6807\u6587\u4ef6\u7684inode\n    if((ip = namei(path)) == 0){\n      end_op();\n      return -1;\n    }\n    ilock(ip);\n    // \u76ee\u5f55\u53ea\u80fd\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\n    if(ip-&gt;type == T_DIR &amp;&amp; omode != O_RDONLY){\n      iunlockput(ip);\n      end_op();\n      return -1;\n    }\n  }\n\n  // \u8bbe\u5907\u6587\u4ef6\n  if(ip-&gt;type == T_DEVICE &amp;&amp; (ip-&gt;major &lt; 0 || ip-&gt;major &gt;= NDEV)){\n    iunlockput(ip);\n    end_op();\n    return -1;\n  }\n\n  // \u5206\u914d\u6587\u4ef6\u63a7\u5236\u5757\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\n  if((f = filealloc()) == 0 || (fd = fdalloc(f)) &lt; 0){\n    if(f)\n      fileclose(f);\n    iunlockput(ip);\n    end_op();\n    return -1;\n  }\n\n  // \u8bbe\u5907\u6587\u4ef6\n  if(ip-&gt;type == T_DEVICE){\n    f-&gt;type = FD_DEVICE;\n    f-&gt;major = ip-&gt;major;\n  } \n  // \u6587\u4ef6\u6216\u76ee\u5f55\n  else {\n    f-&gt;type = FD_INODE;\n    f-&gt;off = 0;\n  }\n  f-&gt;ip = ip;\n  // \u975e\u53ea\u5199\n  f-&gt;readable = !(omode &amp; O_WRONLY);\n  // \u53ea\u5199\u6216\u53ef\u8bfb\u53ef\u5199\n  f-&gt;writable = (omode &amp; O_WRONLY) || (omode &amp; O_RDWR);\n\n  // \u5220\u9664\u6587\u4ef6\n  if((omode &amp; O_TRUNC) &amp;&amp; ip-&gt;type == T_FILE){\n    itrunc(ip);\n  }\n\n  iunlock(ip);\n  // \u7ed3\u675f\u4e00\u4e2a\u4e8b\u52a1\n  end_op();\n\n  // \u8fd4\u56de\u6587\u4ef6\u63cf\u8ff0\u7b26\n  return fd;\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#create","title":"create()","text":"<pre><code>// kernel/sysfile.c\nstatic struct inode*\ncreate(char *path, short type, short major, short minor)\n{\n  struct inode *ip, *dp;\n  char name[DIRSIZ];\n\n  // struct inode* nameiparent(char *path, char *name)\n  // \u8fd4\u56depath\u7684\u7236\u76ee\u5f55\u7684inode\u548c\u76ee\u6807\u6587\u4ef6\u7684name\n  // e.g., path=\"/etc/apt/config\"\n  // dp = inode(\"/etc/apt/\")\n  // name = \"config\"\n  if((dp = nameiparent(path, name)) == 0)\n    return 0;\n\n  ilock(dp);\n\n  // struct inode* dirlookup(struct inode *dp, char *name, uint *poff)\n  // \u67e5\u8be2dp\u76ee\u5f55\u4e0bname\u6587\u4ef6\u7684inode\n  if((ip = dirlookup(dp, name, 0)) != 0){\n    iunlockput(dp);\n    ilock(ip);\n    if(type == T_FILE &amp;&amp; (ip-&gt;type == T_FILE || ip-&gt;type == T_DEVICE))\n      return ip;\n    iunlockput(ip);\n    return 0;\n  }\n\n  // \u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\n  // \u5206\u914dinode\n  if((ip = ialloc(dp-&gt;dev, type)) == 0){\n    iunlockput(dp);\n    return 0;\n  }\n\n  // \u8bbe\u7f6einode\n  ilock(ip);\n  ip-&gt;major = major;\n  ip-&gt;minor = minor;\n  ip-&gt;nlink = 1;\n  // \u5c06ip\u5199\u5165\u5230\u78c1\u76d8\n  iupdate(ip);\n\n  // \u76ee\u5f55\u6587\u4ef6\n  if(type == T_DIR){  // Create . and .. entries.\n    // No ip-&gt;nlink++ for \".\": avoid cyclic ref count.\n    if(dirlink(ip, \".\", ip-&gt;inum) &lt; 0 || dirlink(ip, \"..\", dp-&gt;inum) &lt; 0)\n      goto fail;\n  }\n\n  // \u6dfb\u52a0\u76ee\u5f55\u9879\n  if(dirlink(dp, name, ip-&gt;inum) &lt; 0)\n    goto fail;\n\n  if(type == T_DIR){\n    // now that success is guaranteed:\n    dp-&gt;nlink++;  // for \"..\"\n    iupdate(dp);\n  }\n\n  iunlockput(dp);\n\n  // \u672a\u91ca\u653eip\u7684\u9501\n  return ip;\n\n fail:\n  // something went wrong. de-allocate ip.\n  ip-&gt;nlink = 0;\n  iupdate(ip);\n  iunlockput(ip);\n  iunlockput(dp);\n  return 0;\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/high_level/#file-descriptor","title":"file descriptor (\u6587\u4ef6\u63cf\u8ff0\u7b26)","text":"<pre><code>// kernel/sysfile.c\nstatic int\nfdalloc(struct file *f)\n{\n  int fd;\n  struct proc *p = myproc();\n\n  // NOFILE: \u6bcf\u4e2a\u8fdb\u7a0b\u6700\u591a\u6253\u5f00\u6587\u4ef6\u6570\n  for(fd = 0; fd &lt; NOFILE; fd++){\n    if(p-&gt;ofile[fd] == 0){\n      p-&gt;ofile[fd] = f;\n      // \u6587\u4ef6\u63cf\u8ff0\u7b26\u5373\u4e3a\u4e0b\u6807\n      return fd;\n    }\n  }\n  return -1;\n}\n</code></pre> <pre><code>struct proc {\n...\n  int pid;                     // Process ID\n  struct file *ofile[NOFILE];  // Open files\n  struct inode *cwd;           // Current directory\n...\n};\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/","title":"Filesystem-ch3","text":""},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#disk","title":"disk (\u78c1\u76d8)","text":""},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#_1","title":"\u5e03\u5c40","text":"<p>sector: \u78c1\u76d8\u5b58\u53d6\u7684\u6700\u5c0f\u5355\u4f4d\u3002\u5728xv6\u4e2d\u4e3a1kb</p> <p>block: \u6587\u4ef6\u7cfb\u7edf\u5b58\u53d6\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u4e3asector\u7684\u4efb\u610f\u6574\u6570\u500d\u3002\u5728xv6\u4e2d\u4e3a1kb</p> <p></p> <ul> <li>boot block: \u542f\u52a8\u64cd\u4f5c\u7cfb\u7edf\u7684\u4ee3\u7801</li> <li>super block: \u63cf\u8ff0\u6587\u4ef6\u7cfb\u7edf\u4fe1\u606f</li> <li>log blocks: \u65e5\u5fd7\u5c42</li> <li>inode blocks: \u5b58\u653e\u6240\u6709inode</li> <li>bitmap block: \u8bb0\u5f55data block\u662f\u5426\u7a7a\u95f2</li> <li>data blocks: \u5b58\u50a8\u6587\u4ef6\u548c\u76ee\u5f55\u7684\u5185\u5bb9</li> </ul>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#supber-block","title":"supber block","text":"<pre><code>// kernel/fs.h\nstruct superblock {\n  uint magic;        // Must be FSMAGIC\n  uint size;         // Size of file system image (blocks)\n  uint nblocks;      // Number of data blocks\n  uint ninodes;      // Number of inodes.\n  uint nlog;         // Number of log blocks\n  uint logstart;     // Block number of first log block\n  uint inodestart;   // Block number of first inode block\n  uint bmapstart;    // Block number of first free map block\n};\n</code></pre> <pre><code>#define FSSIZE       2000  // size of file system in blocks\n#define MAXOPBLOCKS  10  // max # of blocks any FS op writes\n#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log\n#define NINODES 200\n</code></pre> <pre><code>// kernel/fs.c\n// there should be one superblock per disk device, \n// but we run with only one device\nstruct superblock sb; \n\n// Init fs\nvoid\nfsinit(int dev) {\n  readsb(dev, &amp;sb);\n  if(sb.magic != FSMAGIC)\n    panic(\"invalid file system\");\n  initlog(dev, &amp;sb);\n}\n\n// Read the super block.\nstatic void\nreadsb(int dev, struct superblock *sb)\n{\n  struct buf *bp;\n\n  bp = bread(dev, 1);\n  memmove(sb, bp-&gt;data, sizeof(*sb));\n  brelse(bp);\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#buffer-cache","title":"buffer cache","text":""},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#struct-buf","title":"struct buf","text":"<pre><code>// kernel/buf.h\nstruct buf {\n  int valid;   // has data been read from disk?\n  int disk;    // does disk \"own\" buf?\n  uint dev;\n  uint blockno;\n  struct sleeplock lock;\n  uint refcnt;      // \n  struct buf *prev; // LRU cache list\n  struct buf *next;\n  uchar data[BSIZE];\n};\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#bcache","title":"bcache","text":"<pre><code>// kernel/bio.c\nstruct {\n  struct spinlock lock;\n  struct buf buf[NBUF];\n\n  // Linked list of all buffers, through prev/next.\n  // Sorted by how recently the buffer was used.\n  // head.next is most recent, head.prev is least.\n  // \u53cc\u5411\u5faa\u73af\u94fe\u8868\n  struct buf head;\n} bcache;\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#bread","title":"bread()","text":"<pre><code>// kernel/bio.c\nstruct buf*\nbread(uint dev, uint blockno)\n{\n  struct buf *b;\n\n  b = bget(dev, blockno);\n  if(!b-&gt;valid) {\n    virtio_disk_rw(b, 0);\n    b-&gt;valid = 1;\n  }\n  return b;\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#bget","title":"bget()","text":"<pre><code>// kernel/bio.c\nstatic struct buf*\nbget(uint dev, uint blockno)\n{\n  struct buf *b;\n\n  acquire(&amp;bcache.lock);\n\n  // Is the block already cached?\n  for(b = bcache.head.next; b != &amp;bcache.head; b = b-&gt;next){\n    if(b-&gt;dev == dev &amp;&amp; b-&gt;blockno == blockno){\n      b-&gt;refcnt++;\n      release(&amp;bcache.lock);\n      acquiresleep(&amp;b-&gt;lock);\n      return b;\n    }\n  }\n\n  // Not cached.\n  // Recycle the least recently used (LRU) unused buffer.\n  // \u9006\u5e8f\u904d\u5386\n  for(b = bcache.head.prev; b != &amp;bcache.head; b = b-&gt;prev){\n    if(b-&gt;refcnt == 0) {\n      b-&gt;dev = dev;\n      b-&gt;blockno = blockno;\n      // \u8fd8\u672a\u4ece\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\n      b-&gt;valid = 0;\n      b-&gt;refcnt = 1;\n      release(&amp;bcache.lock);\n      acquiresleep(&amp;b-&gt;lock);\n      return b;\n    }\n  }\n  panic(\"bget: no buffers\");\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#brelese","title":"brelese()","text":"<pre><code>// kernel/bio.c\nvoid\nbrelse(struct buf *b)\n{\n  if(!holdingsleep(&amp;b-&gt;lock))\n    panic(\"brelse\");\n\n  releasesleep(&amp;b-&gt;lock);\n\n  acquire(&amp;bcache.lock);\n  b-&gt;refcnt--;\n  if (b-&gt;refcnt == 0) {\n    // no one is waiting for it.\n    // b\u79fb\u52a8\u5230\u94fe\u8868\u8868\u5934\n    b-&gt;next-&gt;prev = b-&gt;prev;\n    b-&gt;prev-&gt;next = b-&gt;next;\n    b-&gt;next = bcache.head.next;\n    b-&gt;prev = &amp;bcache.head;\n    bcache.head.next-&gt;prev = b;\n    bcache.head.next = b;\n  }\n\n  release(&amp;bcache.lock);\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#logging","title":"logging","text":""},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#why","title":"why","text":"<ul> <li>case 1</li> </ul> <pre><code>// kernel/sysfile.c\nstatic struct inode*\ncreate(char *path, short type, short major, short minor)\n{\n...\n  if((ip = ialloc(dp-&gt;dev, type)) == 0){\n    iunlockput(dp);\n    return 0;\n  }\n  &lt;- crashed here, what will happen\n...\n}\n</code></pre> <p>crash\u4f1a\u5bfc\u81f4\u6211\u4eec\u4f1a\u4e22\u5931\u8fd9\u4e2ainode</p> <ul> <li>case 2</li> </ul> <p>\u5728\u4e3a\u6587\u4ef6\u5206\u914dblock\u65f6</p> <ol> <li>\u4ece data blocks \u4e2d\u627e\u5230\u4e00\u5757\u7a7a\u95f2 block</li> <li>\u5c06\u8be5 block number \u5199\u5165\u5230\u6587\u4ef6\u7684 inode \u4e2d</li> <li>\u5728bitmap\u4e2d\u6807\u8bb0\u8be5block\u5df2\u4f7f\u7528</li> </ol> <p>\u5982\u679c2\uff0c3\u4e4b\u95f4 crash \u4f1a\u600e\u4e48\u6837</p> <p>crash \u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd9\u4e2a block \u88ab\u5206\u914d\u7ed9\u591a\u4e2a\u6587\u4ef6</p> <p>fatal !</p>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#what","title":"what","text":"<p>buffer cache \u4e4b\u4e0a\u7684\u4e00\u79cd\u673a\u5236\uff0c\u7528\u6765\u4fdd\u8bc1\u7cfb\u7edf\u8c03\u7528\u7684\u539f\u5b50\u6027\uff0c\u540c\u65f6\u80fd\u591f\u5728\u7cfb\u7edf crash \u4e4b\u540e\u8fdb\u884c Fast Recovery</p>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#how","title":"how","text":"<pre><code>// kernel/log.c\nstruct logheader {\n  int n;\n  int block[LOGSIZE];\n};\n\nstruct log {\n  struct spinlock lock;\n  int start;       // start of log blocks\n  int size;         // number of log blocks\n  int outstanding; // how many FS sys calls are executing.\n  int committing;  // in commit(), please wait.\n  int dev;\n  struct logheader lh;\n};\nstruct log log;\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#log","title":"log \u5b9e\u73b0","text":"<ul> <li>log write4</li> </ul> <p>\u5f53\u9700\u8981\u66f4\u65b0 inode block \u6216 bitmap block \u6216 data block \u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u76f4\u63a5\u5199\u5165\u5230\u78c1\u76d8\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u800c\u662f\u8bb0\u5f55\u4e00\u6761 log \u5230\u78c1\u76d8\u7684 log \u5206\u533a</p> <pre><code>// kernel/log.c\nvoid\nlog_write(struct buf *b)\n{\n  int i;\n\n  acquire(&amp;log.lock);\n  if (log.lh.n &gt;= LOGSIZE || log.lh.n &gt;= log.size - 1)\n    panic(\"too big a transaction\");\n  if (log.outstanding &lt; 1)\n    panic(\"log_write outside of trans\");\n  // \u8981\u5199\u5165\u7684 block number \u5df2\u5b58\u5728\n  for (i = 0; i &lt; log.lh.n; i++) {\n    if (log.lh.block[i] == b-&gt;blockno)   // log absorption\n      break;\n  }\n  log.lh.block[i] = b-&gt;blockno;\n  if (i == log.lh.n) {  // Add new block to log?\n    bpin(b);\n    log.lh.n++;\n  }\n  // i != log.lh.n\n  // log \u5df2\u5b58\u5728\u5e76\u4e14\u672a commit\uff0cnothing to do\n  release(&amp;log.lock);\n}\n</code></pre> <ul> <li>commit</li> </ul> <pre><code>// kernel/log.c\nstatic void\ncommit()\n{\n  if (log.lh.n &gt; 0) {\n    write_log();     // Write modified blocks from cache to log\n    write_head();    // Write header to disk -- the real commit\n    install_trans(0); // Now install writes to home locations\n    log.lh.n = 0;\n    write_head();    // Erase the transaction from the log\n  }\n}\n</code></pre> <p>\u5bf9\u5355\u4e2a disk block \u7684\u8bfb\u5199\u5177\u6709\u539f\u5b50\u6027</p> <p>commit \u53ef\u4fdd\u8bc1\u7cfb\u7edf\u8c03\u7528\u7684\u539f\u5b50\u6027</p> <pre><code>// kernel/log.c\nstatic void\nwrite_log(void)\n{\n  int tail;\n\n  for (tail = 0; tail &lt; log.lh.n; tail++) {\n    struct buf *to = bread(log.dev, log.start+tail+1); // log block\n    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block\n    // \u5c06 log \u4e2d\u8bb0\u5f55\u7684\u7f13\u51b2\u5757\u53f7\u7684\u7f13\u51b2\u5757\u590d\u5236\u5230 log \u7f13\u51b2\u5757\n    memmove(to-&gt;data, from-&gt;data, BSIZE);\n    // \u5c06 log \u7f13\u51b2\u5757\u5199\u51fa\u5230\u78c1\u76d8\n    bwrite(to);  // write the log\n    brelse(from);\n    brelse(to);\n  }\n}\n</code></pre> <pre><code>// kernel/log.c\nstatic void\nwrite_head(void)\n{\n  struct buf *buf = bread(log.dev, log.start);\n  struct logheader *hb = (struct logheader *) (buf-&gt;data);\n  int i;\n  // \u5c06\u5185\u5b58\u4e2d\u7684 logheader \u590d\u5236\u5230 log head \u7684\u7f13\u51b2\u5757\n  hb-&gt;n = log.lh.n;\n  for (i = 0; i &lt; log.lh.n; i++) {\n    hb-&gt;block[i] = log.lh.block[i];\n  }\n  // \u5c06 log head \u7684\u7f13\u51b2\u5757\u5199\u51fa\u5230\u78c1\u76d8\n  bwrite(buf);\n  brelse(buf);\n}\n</code></pre> <ul> <li>install trans</li> </ul> <pre><code>// kernel/log.c\nstatic void\ninstall_trans(int recovering)\n{\n  int tail;\n\n  for (tail = 0; tail &lt; log.lh.n; tail++) {\n    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block\n    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst\n    memmove(dbuf-&gt;data, lbuf-&gt;data, BSIZE);  // copy block to dst\n    bwrite(dbuf);  // write dst to disk\n    if(recovering == 0)\n      bunpin(dbuf);\n    brelse(lbuf);\n    brelse(dbuf);\n  }\n}\n</code></pre> <ul> <li>clean log</li> </ul> <pre><code>// kernel/log.c\nstatic void\ncommit()\n{\n...\n  log.lh.n = 0;\n  write_head();    // Erase the transaction from the log\n}\n</code></pre> <ul> <li>recovery</li> </ul> <pre><code>// kernel/log.c\nstatic void\nrecover_from_log(void)\n{\n  read_head();\n  install_trans(1); // if committed, copy from log to disk\n  log.lh.n = 0;\n  write_head(); // clear the log\n}\n</code></pre>"},{"location":"NOTES/OS/Xv6/Filesystem/low_level/#usage","title":"usage","text":"<pre><code>uint64\nsys_open()\n{\n...\n  // \u5408\u6cd5\u6027\u68c0\u67e5\n  begin_op();\n  ...\n  log_write();\n  ...\n  log_write();\n  ...\n  end_op();\n...\n}\n</code></pre> <pre><code>// kernel/log.c\nvoid\nbegin_op(void)\n{\n  acquire(&amp;log.lock);\n  while(1){\n    // \u6709\u7cfb\u7edf\u8c03\u7528\u6b63\u5728 commit\n    if(log.committing){\n      sleep(&amp;log, &amp;log.lock);\n      // \u53ef\u80fd\u8d85\u51fa log \u5927\u5c0f\u9650\u5236\n    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS &gt; LOGSIZE){\n      // this op might exhaust log space; wait for commit.\n      sleep(&amp;log, &amp;log.lock);\n    } else {\n      log.outstanding += 1;\n      release(&amp;log.lock);\n      break;\n    }\n  }\n}\n</code></pre> <pre><code>// kernel/log.c\nvoid\nend_op(void)\n{\n  int do_commit = 0;\n\n  acquire(&amp;log.lock);\n  log.outstanding -= 1;\n  if(log.committing)\n    panic(\"log.committing\");\n  // \u6240\u6709\u7cfb\u7edf\u8c03\u7528\u90fd\u5df2\u7ecf end_op()\n  if(log.outstanding == 0){\n    do_commit = 1;\n    log.committing = 1;\n  } else {\n    // begin_op() may be waiting for log space,\n    // and decrementing log.outstanding has decreased\n    // the amount of reserved space.\n    wakeup(&amp;log);\n  }\n  release(&amp;log.lock);\n\n  // if log.outstanding != 0\n  // noting to do\n\n  if(do_commit){\n    // call commit w/o holding locks, since not allowed\n    // to sleep with locks.\n    commit();\n    acquire(&amp;log.lock);\n    log.committing = 0;\n    wakeup(&amp;log);\n    release(&amp;log.lock);\n  }\n}\n</code></pre>"},{"location":"NOTES/rust/Basic-syntax/","title":"Basics","text":""},{"location":"NOTES/rust/Basic-syntax/#_1","title":"\u53d8\u91cf","text":""},{"location":"NOTES/rust/Basic-syntax/#_2","title":"\u4e0d\u53ef\u53d8\u53d8\u91cf","text":"<pre><code>let x = 5;\nx = 6;  // \u7f16\u8bd1\u62a5\u9519\n</code></pre>"},{"location":"NOTES/rust/Basic-syntax/#_3","title":"\u53ef\u53d8\u53d8\u91cf","text":"<pre><code>let mut x = 5;\nx = 6;  // \u7f16\u8bd1\u901a\u8fc7\n</code></pre>"},{"location":"NOTES/rust/Basic-syntax/#_4","title":"\u5e38\u91cf","text":"<p><pre><code>const PI: f64 = 3.14;\n</code></pre> rust \u4e2d\u89c4\u5b9a\u5e38\u91cf\u547d\u540d\u5168\u90e8\u7528\u5927\u5199\u5b57\u6bcd\u52a0\u4e0b\u5212\u7ebf\u4f5c\u4e3a\u5206\u9694\u53f7\u3002</p>"},{"location":"NOTES/rust/Basic-syntax/#_5","title":"\u9690\u85cf","text":"<pre><code>fn main() {\n    let x = 5;\n\n    let x = x + 1;  // \u8fd9\u4e2a x \u4f1a\u8986\u76d6\u4e0a\u4e00\u4e2a x\n\n    {\n        let x = x * 2;\n        println!(\"The value of x in the inner scope is: {x}\");  // \u8f93\u51fa12\n    } // \u4e0a\u9762\u4e00\u4e2a x \u7684\u4f5c\u7528\u57df\u5728\u8fd9\u91cc\u7ed3\u675f\n\n    println!(\"The value of x is: {x}\"); // \u8f93\u51fa6\n}\n</code></pre>"},{"location":"NOTES/rust/Basic-syntax/#_6","title":"\u6570\u636e\u7c7b\u578b","text":"<p>rust \u4e2d\u6709\u4e24\u7c7b\u6570\u636e\u7c7b\u578b\uff1a\u6807\u91cf (scalar) \u548c\u590d\u5408 (compound)\u3002</p>"},{"location":"NOTES/rust/Basic-syntax/#_7","title":"\u6807\u91cf\u7c7b\u578b","text":"<ul> <li>\u6574\u578b   \u6709\u7b26\u53f7\uff1ai8 ~ i128   \u65e0\u7b26\u53f7\uff1au8 ~ u128   \u53e6\u5916\u8fd8\u6709\u4e24\u4e2a\u7279\u6b8a\u7c7b\u578b <code>isize</code> \u548c <code>usize</code>, \u5b83\u4eec\u4f9d\u8d56\u8fd0\u884c\u7a0b\u5e8f\u7684\u8ba1\u7b97\u673a\u67b6\u6784\uff1a64 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 64 \u4f4d\u7684\uff0c 32 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 32 \u4f4d\u7684\u3002   \u9ed8\u8ba4\u7c7b\u578b\u4e3a <code>i32</code></li> <li>\u6d6e\u70b9\u578b   \u4e24\u7c7b\uff1a<code>f32</code> \u548c <code>f64</code>\u3002   \u9ed8\u8ba4\u7c7b\u578b\u4e3a <code>f64</code></li> <li>\u5e03\u5c14\u578b <code>true</code> \u548c <code>false</code></li> <li>\u5b57\u7b26\u578b <code>char</code>\u5173\u952e\u5b57   char \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a**\u56db\u4e2a\u5b57\u8282**\uff0c\u4ee3\u8868\u4e00\u4e2a Unicode \u6807\u91cf\u503c\u3002</li> </ul>"},{"location":"NOTES/rust/Basic-syntax/#_8","title":"\u590d\u5408\u7c7b\u578b","text":"<ul> <li>\u5143\u7ec4 (tuple)   <pre><code>fn tuple() {\n  let tup1: (&amp;str, i32, f64) = (\"LiHua\", 20, 125.5);  // \u5143\u7ec4\u7684\u957f\u5ea6\u5728\u521b\u5efa\u65f6\u5fc5\u987b\u786e\u5b9a\n  let (name, age, weight) = tup1; // \u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u89e3\u6784\u5143\u7ec4\u503c\n  println!(\"name: {}, age: {}, weight: {}\", name, age, weight);\n  println!(\"name: {}, age: {}, weight: {}\", tup1.0, tup1.1, tup1.2);    \n}\n</code></pre>   \u4e0d\u5e26\u4efb\u4f55\u503c\u7684\u5143\u7ec4\u53eb\u505a \u5355\u5143 (uinit), \u5199\u6cd5\u4e3a<code>()</code></li> <li>\u6570\u7ec4 (array)   \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\uff0c\u4e14\u957f\u5ea6\u5728\u521b\u5efa\u6570\u7ec4\u65f6\u786e\u5b9a\uff0c\u5728\u6808\u4e0a\u5206\u914d\u3002   <pre><code>fn array() {\n  let a = [1, 2, 3, 4, 5];  // \u81ea\u52a8\u63a8\u5bfc\u7c7b\u578b\u548c\u957f\u5ea6\n  let b: [i32; 5] = [1, 2, 3, 4, 5];  // \u663e\u793a\u8bf4\u660e\u7c7b\u578b\u548c\u957f\u5ea6\n  let c = [3; 5];   // \u957f\u5ea6\u4e3a5\uff0c \u5143\u7d20\u7684\u521d\u503c\u4e3a3\n\n  let a1 = a[1];  // \u8bbf\u95ee\u6570\u7ec4 a \u7684\u7b2c1\u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f2\n  let b2 = b[2];\n}\n</code></pre></li> </ul>"},{"location":"NOTES/rust/Basic-syntax/#_9","title":"\u51fd\u6570","text":"<pre><code>fn max(a: i32, b: i32) -&gt; i32 {\n  if a &gt; b {\n    a\n  } else {\n    b\n  }\n}\n</code></pre>"},{"location":"NOTES/rust/Basic-syntax/#_10","title":"\u53c2\u6570","text":"<p>\u6bcf\u4e2a\u53c2\u6570\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u53c2\u6570\u540d\u548c\u53c2\u6570\u7c7b\u578b</p>"},{"location":"NOTES/rust/Basic-syntax/#_11","title":"\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f","text":"<p>\u51fd\u6570\u4f53\u7531\u4e00\u7cfb\u5217\u8bed\u53e5\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u7ed3\u5c3e\u8868\u8fbe\u5f0f\u6784\u6210\u3002</p> <ul> <li> <p>\u8bed\u53e5 (Statements)   \u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u4f46\u65e0\u8fd4\u56de\u503c\u3002\u4f8b\u5982\uff1a   <pre><code>fn main() {\n  let y = 6;\n}\n</code></pre>   \u5176\u4e2d\u51fd\u6570\u5b9a\u4e49\u672c\u8eab\u662f\u4e00\u4e2a\u8bed\u53e5\uff0c<code>main</code> \u51fd\u6570\u91cc\u8fd8\u6709\u4e00\u4e2a\u8d4b\u503c\u8bed\u53e5\u3002   \u56e0\u6b64\uff0crust \u4e2d\u4e0d\u80fd\u8fde\u7eed\u8d4b\u503c\u3002</p> </li> <li> <p>\u8868\u8fbe\u5f0f (Expressions)   \u5177\u6709\u8fd4\u56de\u503c\u3002\u5305\u62ec\uff1a  </p> <ul> <li>\u6570\u5b66\u8fd0\u7b97</li> <li>\u51fd\u6570\u8c03\u7528</li> <li>\u5b8f\u8c03\u7528</li> <li>\u7528\u5927\u62ec\u53f7\u521b\u5efa\u7684\u4f5c\u7528\u57df</li> </ul> </li> </ul>"},{"location":"NOTES/rust/Basic-syntax/#_12","title":"\u8fd4\u56de\u503c","text":"<p>\u5982\u4e0a <code>max</code> \u51fd\u6570\u4e2d\uff0c\u5728 '-&gt;' \u540e\u58f0\u660e\u4e86\u4e00\u4e2a i32 \u7c7b\u578b\u7684\u8fd4\u56de\u503c\u3002</p>"},{"location":"NOTES/rust/Basic-syntax/#_13","title":"\u6ce8\u91ca","text":""},{"location":"NOTES/rust/Basic-syntax/#_14","title":"\u4e00\u822c\u6ce8\u91ca","text":"<pre><code>// This is single-line comment.\n/* This is multi-line comment. */\nfn main() {\n  println!(\"hello world\");\n}\n</code></pre>"},{"location":"NOTES/rust/Basic-syntax/#_15","title":"\u6587\u6863\u6ce8\u91ca","text":"<p><pre><code>/// This is document single-line comment.\n/** \n  This is document multi-line comment.\n*/\nfn main() {\n  println!(\"hello world\");\n}\n</code></pre> \u6ce8\u610f:   </p> <ul> <li>\u6587\u6863\u6ce8\u91ca\u9700\u8981\u4f4d\u4e8e lib \u7c7b\u578b\u7684\u5305\u4e2d\uff0c\u4f8b\u5982 src/lib.rs \u4e2d  </li> <li>\u6587\u6863\u6ce8\u91ca\u53ef\u4ee5\u4f7f\u7528 markdown\u8bed\u6cd5\uff01\u4f8b\u5982 # Examples \u7684\u6807\u9898\uff0c\u4ee5\u53ca\u4ee3\u7801\u5757\u9ad8\u4eae  </li> <li>\u88ab\u6ce8\u91ca\u7684\u5bf9\u8c61\u9700\u8981\u4f7f\u7528 pub \u5bf9\u5916\u53ef\u89c1\uff0c\u8bb0\u4f4f\uff1a\u6587\u6863\u6ce8\u91ca\u662f\u7ed9\u7528\u6237\u770b\u7684\uff0c\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282\u4e0d\u5e94\u8be5\u88ab\u66b4\u9732\u51fa\u53bb  </li> </ul>"},{"location":"NOTES/rust/Basic-syntax/#_16","title":"\u63a7\u5236\u6d41","text":""},{"location":"NOTES/rust/Basic-syntax/#if","title":"if \u8868\u8fbe\u5f0f","text":"<pre><code>fn is_even(x: i32) -&gt; bool{\n  if x % 2 == 0 {\n    true\n  } else if x % 2 != 0{\n    false\n  } else {\n    println!(\"error\");\n  }\n}\n</code></pre>"},{"location":"NOTES/rust/Basic-syntax/#_17","title":"\u5faa\u73af\u8868\u8fbe\u5f0f","text":"<p>\u6709\u4e09\u79cd\u5faa\u73af\uff1a  </p> <ul> <li>loop   \u76f8\u5f53\u4e8e <code>while(true)</code> \u5faa\u73af \u5faa\u73af\u6807\u7b7e <pre><code>let mut i = 0;\nlet mut j = 0;\n'break_tag: loop {\n  i += 1;\n  loop {\n    if i == 5 {\n      break 'break_tag;\n    }\n    j += 1;\n    if j % 5 == 0 {\n      break;\n    }\n  }\n}\n</code></pre></li> <li>while <pre><code>let mut i = 0;\nwhile i != 100 {\n  println!(\"{i}\");\n  i += 1;\n}\n</code></pre></li> <li>for <pre><code>fn main() {\n  // \u6253\u5370\u7ed3\u679c\u4e3a\uff1a\n  // 3!\n  // 2!\n  // 1!\n  for n in (1..4).rev() {\n    println!(\"{n}!\");\n  }\n}\n</code></pre></li> </ul>"},{"location":"NOTES/rust/Cargo/","title":"cargo","text":"<p>Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002\u53ef\u4ee5\u7528\u6765\u6784\u5efa\u4ee3\u7801\u3001\u4e0b\u8f7d\u4f9d\u8d56\u5e93\uff0c\u4ee5\u53ca\u7f16\u8bd1\u8fd9\u4e9b\u5e93\u3002</p>"},{"location":"NOTES/rust/Cargo/#cargo-new-project","title":"cargo new [&lt;project&gt;]","text":"<p>\u521b\u5efa\u9879\u76ee   \u521b\u5efa hello_cargo \u9879\u76ee: <code>cargo new hello_cargo</code></p>"},{"location":"NOTES/rust/Cargo/#cargo-build","title":"cargo build","text":"<p>\u6784\u5efa\u9879\u76ee   \u4f7f\u7528 <code>cargo build --release</code> \u8fdb\u884c\u7f16\u8bd1\u4f18\u5316</p>"},{"location":"NOTES/rust/Cargo/#cargo-run","title":"cargo run","text":"<p>\u6784\u5efa\u5e76\u8fd0\u884c\u9879\u76ee</p>"},{"location":"NOTES/rust/Cargo/#cargo-check","title":"cargo check","text":"<p>\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u53ef\u7f16\u8bd1\uff0c\u4f46\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6</p>"},{"location":"NOTES/rust/Cargo/#cargotoml","title":"Cargo.toml","text":"<p>TOML(Tom's Obvious, minimal Language)  </p>"},{"location":"NOTES/rust/Cargo/#cargolock","title":"Cargo.lock","text":"<p>\u786e\u4fdd\u9879\u76ee\u5728\u6784\u5efa\u65f6\u53ea\u4f1a\u4f7f\u7528\u6307\u5b9a\u7684\u4f9d\u8d56\u7248\u672c </p>"},{"location":"NOTES/rust/Cargo/#cargo-update","title":"cargo update","text":"<p>\u5347\u7ea7 crate(\u4ee3\u7801\u5305) </p>"},{"location":"NOTES/rust/Collections/","title":"Collection","text":""},{"location":"NOTES/rust/Collections/#vector","title":"Vector","text":""},{"location":"NOTES/rust/Collections/#string","title":"String","text":""},{"location":"NOTES/rust/Collections/#hash-map","title":"hash map","text":""},{"location":"NOTES/rust/Enum/","title":"Enum","text":""},{"location":"NOTES/rust/Enum/#_1","title":"\u679a\u4e3e\u7684\u5b9a\u4e49","text":"<pre><code>enum IpAddrKind {\n    V4,\n    V6,\n}\n</code></pre>"},{"location":"NOTES/rust/Enum/#_2","title":"\u679a\u4e3e\u503c","text":"<p>\u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa <code>IpAddrKind</code> \u4e24\u4e2a\u4e0d\u540c\u6210\u5458\u7684\u5b9e\u4f8b\uff1a <pre><code>    let four = IpAddrKind::V4;\n    let six = IpAddrKind::V6;\n</code></pre></p> <p>\u5e26\u6709\u53c2\u6570\u7684\u679a\u4e3e\u6210\u5458\uff1a <pre><code>    enum IpAddr {\n        V4(u8, u8, u8, u8),\n        V6(String),\n    }\n\n    let home = IpAddr::V4(127, 0, 0, 1);\n\n    let loopback = IpAddr::V6(String::from(\"::1\"));\n</code></pre> \u6b64\u65f6\uff0c\u6bcf\u4e00\u4e2a\u6211\u4eec\u5b9a\u4e49\u7684\u679a\u4e3e\u6210\u5458\u7684\u540d\u5b57\u4e5f\u53d8\u6210\u4e86\u4e00\u4e2a\u6784\u5efa\u679a\u4e3e\u7684\u5b9e\u4f8b\u7684\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>IpAddr::V4()</code> \u662f\u4e00\u4e2a\u83b7\u53d6 <code>String</code> \u53c2\u6570\u5e76\u8fd4\u56de <code>IpAddr</code> \u7c7b\u578b\u5b9e\u4f8b\u7684\u51fd\u6570\u8c03\u7528\u3002\u4f5c\u4e3a\u5b9a\u4e49\u679a\u4e3e\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u88ab\u5b9a\u4e49\u3002 \u66f4\u590d\u6742\u7684\u679a\u4e3e\uff1a <pre><code>enum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n</code></pre></p>"},{"location":"NOTES/rust/Enum/#option","title":"Option \u679a\u4e3e","text":"<p><code>Option</code> \u7c7b\u578b\u5e94\u7528\u5e7f\u6cdb\u56e0\u4e3a\u5b83\u7f16\u7801\u4e86\u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u573a\u666f\uff0c\u5373\u4e00\u4e2a\u503c\u8981\u4e48\u6709\u503c\u8981\u4e48\u6ca1\u503c\u3002 \u6807\u51c6\u5e93\u4e2d\u7684 <code>Option</code> \u5b9a\u4e49\u5982\u4e0b\uff1a <pre><code>enum Option&lt;T&gt; {\n    None,\n    Some(T),\n}\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u5c1d\u8bd5\u5c06 Option \u4e0e i8 \u76f8\u52a0\uff1a <pre><code>    let x: i8 = 5;\n    let y: Option&lt;i8&gt; = Some(5);\n\n    let sum = x + y;\n</code></pre> \u5f53\u5728 Rust \u4e2d\u62e5\u6709\u4e00\u4e2a\u50cf i8 \u8fd9\u6837\u7c7b\u578b\u7684\u503c\u65f6\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u5b83\u603b\u662f\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u81ea\u4fe1\u4f7f\u7528\u800c\u65e0\u9700\u505a\u7a7a\u503c\u68c0\u67e5\u3002\u53ea\u6709\u5f53\u4f7f\u7528 Option\uff08\u6216\u8005\u4efb\u4f55\u7528\u5230\u7684\u7c7b\u578b\uff09\u7684\u65f6\u5019\u9700\u8981\u62c5\u5fc3\u53ef\u80fd\u6ca1\u6709\u503c\uff0c\u800c\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6211\u4eec\u5728\u4f7f\u7528\u503c\u4e4b\u524d\u5904\u7406\u4e86\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002"},{"location":"NOTES/rust/Enum/#match","title":"match \u63a7\u5236\u6d41\u7ed3\u6784","text":"<p>\u57fa\u672c\u7528\u6cd5\uff1a <pre><code>enum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -&gt; u8 {\n    match coin {\n        Coin::Penny =&gt; 1,\n        Coin::Nickel =&gt; 5,\n        Coin::Dime =&gt; 10,\n        Coin::Quarter =&gt; 25,\n    }\n}\n</code></pre></p>"},{"location":"NOTES/rust/Enum/#optiont","title":"\u5339\u914d Option&lt;T&gt;","text":"<pre><code>fn main() {\n    fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {\n        match x {\n            None =&gt; None,\n            Some(i) =&gt; Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n}\n</code></pre>"},{"location":"NOTES/rust/Enum/#_3","title":"\u5339\u914d\u662f\u7a77\u5c3d\u7684","text":"<p>Rust \u4e2d\u7684\u5339\u914d\u662f \u7a77\u5c3d\u7684\uff08exhaustive\uff09\uff1a\u5fc5\u987b\u7a77\u4e3e\u5230\u6700\u540e\u7684\u53ef\u80fd\u6027\u6765\u4f7f\u4ee3\u7801\u6709\u6548\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e <code>Option&lt;T&gt;</code> \u7c7b\u578b\uff0c\u5fc5\u987b\u5904\u7406 <code>Some</code> \u548c <code>None</code> \u4e24\u79cd\u60c5\u51b5\uff0c\u7f3a\u4e00\u4e0d\u53ef\u3002\u4e0b\u8ff0\u5199\u6cd5\u662f\u9519\u8bef\u7684\uff1a <pre><code>    fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {\n        match x {\n            Some(i) =&gt; Some(i + 1),\n        }\n    }\n</code></pre></p>"},{"location":"NOTES/rust/Enum/#_","title":"\u901a\u914d\u6a21\u5f0f\u548c_\u5360\u4f4d\u7b26","text":""},{"location":"NOTES/rust/Enum/#_4","title":"\u901a\u914d\u6a21\u5f0f","text":"<pre><code>    let dice_roll = 9;\n    match dice_roll {\n        3 =&gt; add_fancy_hat(),\n        7 =&gt; remove_fancy_hat(),\n        other =&gt; move_player(other),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n    fn move_player(num_spaces: u8) {}\n</code></pre>"},{"location":"NOTES/rust/Enum/#__1","title":"_\u5360\u4f4d\u7b26","text":"<pre><code>    let dice_roll = 9;\n    match dice_roll {\n        3 =&gt; add_fancy_hat(),\n        7 =&gt; remove_fancy_hat(),\n        _ =&gt; reroll(),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n    fn reroll() {}\n</code></pre>"},{"location":"NOTES/rust/Enum/#if-let","title":"if let \u7b80\u6d01\u63a7\u5236\u6d41","text":"<p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u53ef\u4ee5\u8ba4\u4e3a if let \u662f match \u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u5f53\u503c\u5339\u914d\u67d0\u4e00\u6a21\u5f0f\u65f6\u6267\u884c\u4ee3\u7801\u800c\u5ffd\u7565\u6240\u6709\u5176\u4ed6\u503c\u3002 <pre><code>    let config_max = Some(3u8);\n    if let Some(max) = config_max {\n        println!(\"The maximum is configured to be {}\", max);\n    }\n</code></pre></p>"},{"location":"NOTES/rust/Error-handling/","title":"Error handling","text":""},{"location":"NOTES/rust/Error-handling/#panic","title":"panic! \u5b8f","text":"<p>\u5f53\u7a0b\u5e8f\u51fa\u73b0 bug \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>panic!</code> \u5b8f\uff0c\u5f53\u6267\u884c\u8fd9\u4e2a\u5b8f\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u6253\u5370\u51fa\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u5c55\u5f00\u5e76\u6e05\u7406\u6808\u6570\u636e\uff0c\u7136\u540e\u63a5\u7740\u9000\u51fa\u3002  </p> <p>\u5f53\u51fa\u73b0 panic \u65f6\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u4f1a\u5f00\u59cb \u5c55\u5f00\uff08unwinding\uff09\uff0c\u8fd9\u610f\u5473\u7740 Rust \u4f1a\u56de\u6eaf\u6808\u5e76\u6e05\u7406\u5b83\u9047\u5230\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u7684\u6570\u636e\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u56de\u6eaf\u5e76\u6e05\u7406\u7684\u8fc7\u7a0b\u6709\u5f88\u591a\u5de5\u4f5c\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u76f4\u63a5 \u7ec8\u6b62\uff08abort\uff09\uff0c\u8fd9\u4f1a\u4e0d\u6e05\u7406\u6570\u636e\u5c31\u9000\u51fa\u7a0b\u5e8f\u3002\u90a3\u4e48\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u9700\u8981\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u6e05\u7406\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5728release\u6a21\u5f0f\u4e2d panic \u65f6\u76f4\u63a5\u7ec8\u6b62\uff1a <pre><code>// Cargo.toml\n[profile.release]\npanic = 'abort'\n</code></pre></p>"},{"location":"NOTES/rust/Error-handling/#panic-backtrace","title":"\u4f7f\u7528 panic! \u7684 backtrace","text":"<p>\u6709\u4ee5\u4e0b\u4ee3\u7801\uff1a <pre><code>fn main() {\n    let v = vec![1, 2, 3];\n\n    v[99];\n}\n</code></pre> \u5c1d\u8bd5\u8fd0\u884c\uff1a <pre><code>$ cargo run\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/panic`\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', libcore/slice/mod.rs:2448:10\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre> \u4f7f\u7528 backtrace\uff1a <pre><code>$ RUST_BACKTRACE=1 cargo run\n...\n</code></pre></p>"},{"location":"NOTES/rust/Error-handling/#result","title":"Result \u7c7b\u578b","text":"<p><code>Result</code> \u7c7b\u578b\u5728\u6807\u51c6\u5e93\u4e2d\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a <pre><code>enum Result&lt;T, E&gt; {\n    Ok(T),\n    Err(E),\n}\n</code></pre></p>"},{"location":"NOTES/rust/Error-handling/#result_1","title":"\u4f7f\u7528 <code>Result</code> \u7c7b\u578b\u5904\u7406\u53ef\u6062\u590d\u9519\u8bef","text":"<pre><code>use std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\");\n\n    let f = match f {\n        Ok(file) =&gt; file,\n        Err(error) =&gt; {\n            panic!(\"Problem opening the file: {:?}\", error)\n        },\n    };\n}\n</code></pre>"},{"location":"NOTES/rust/Error-handling/#_1","title":"\u5339\u914d\u4e0d\u540c\u7c7b\u578b\u7684\u9519\u8bef","text":"<pre><code>use std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open(\"hello.txt\");\n\n    let f = match f {\n        Ok(file) =&gt; file,\n        Err(error) =&gt; match error.kind() {\n            ErrorKind::NotFound =&gt; match File::create(\"hello.txt\") {\n                Ok(fc) =&gt; fc,\n                Err(e) =&gt; panic!(\"Problem creating the file: {:?}\", e),\n            },\n            other_error =&gt; panic!(\"Problem opening the file: {:?}\", other_error),\n        },\n    };\n}\n</code></pre>"},{"location":"NOTES/rust/Error-handling/#unwrap-expect","title":"unwrap \u548c expect","text":"<pre><code>use std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\").unwrap();\n}\n</code></pre> <pre><code>use std::fs::File;\n\nfn main() {\n    let f = File::open(\"hello.txt\").expect(\"Failed to open hello.txt\");\n}\n</code></pre>"},{"location":"NOTES/rust/Error-handling/#_2","title":"\u4f20\u64ad\u9519\u8bef","text":"<p>\u5f53\u7f16\u5199\u4e00\u4e2a\u5176\u5b9e\u73b0\u4f1a\u8c03\u7528\u4e00\u4e9b\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\u7684\u51fd\u6570\u65f6\uff0c\u9664\u4e86\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5904\u7406\u9519\u8bef\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u8ba9\u8c03\u7528\u8005\u77e5\u9053\u8fd9\u4e2a\u9519\u8bef\u5e76\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u3002\u8fd9\u88ab\u79f0\u4e3a \u4f20\u64ad\uff08propagating\uff09\u9519\u8bef\u3002\u4f8b\u5982\uff1a <pre><code>#![allow(unused_variables)]\nfn main() {\nuse std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\n    let f = File::open(\"hello.txt\");\n\n    let mut f = match f {\n        Ok(file) =&gt; file,\n        Err(e) =&gt; return Err(e),\n    };\n\n    let mut s = String::new();\n\n    match f.read_to_string(&amp;mut s) {\n        Ok(_) =&gt; Ok(s),\n        Err(e) =&gt; Err(e),\n    }\n}\n}\n</code></pre></p>"},{"location":"NOTES/rust/Error-handling/#_3","title":"? \u8fd0\u7b97\u7b26","text":"<p><pre><code>use std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn read_username_from_file() -&gt; Result&lt;String, io::Error&gt; {\n    let mut f = File::open(\"hello.txt\")?;\n    let mut s = String::new();\n    f.read_to_string(&amp;mut s)?;\n    Ok(s)\n}\n</code></pre> \u5b83\u5b9e\u73b0\u4e86\u548c\u4e0a\u4e2a\u4f8b\u5b50\u76f8\u540c\u7684\u529f\u80fd\u3002</p>"},{"location":"NOTES/rust/Error-handling/#main-result","title":"main \u51fd\u6570\u8fd4\u56de Result","text":"<pre><code>use std::error::Error;\nuse std::fs::File;\n\nfn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n    let f = File::open(\"hello.txt\")?;\n\n    Ok(())\n}\n</code></pre>"},{"location":"NOTES/rust/Ownership/","title":"Ownership","text":""},{"location":"NOTES/rust/Ownership/#_1","title":"\u6240\u6709\u6743","text":""},{"location":"NOTES/rust/Ownership/#_2","title":"\u6240\u6709\u6743\u89c4\u5219","text":"<ol> <li>Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005\uff08owner\uff09\u3002</li> <li>\u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002</li> <li>\u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002</li> </ol>"},{"location":"NOTES/rust/Ownership/#_3","title":"\u53d8\u91cf\u4f5c\u7528\u57df","text":"<p><pre><code>fn main() {\n    {                      // s \u5728\u8fd9\u91cc\u65e0\u6548, \u5b83\u5c1a\u672a\u58f0\u660e\n        let s = \"hello\";   // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684\n        // \u4f7f\u7528 s\n    }                      // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0cs \u4e0d\u518d\u6709\u6548\n}\n</code></pre> \u53d8\u91cf <code>s</code> \u7ed1\u5b9a\u5230\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u503c\u662f\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u3002\u8fd9\u4e2a\u53d8\u91cf\u4ece\u58f0\u660e\u7684\u70b9\u5f00\u59cb\u76f4\u5230\u5f53\u524d \u4f5c\u7528\u57df \u7ed3\u675f\u65f6\u90fd\u662f\u6709\u6548\u7684\u3002</p>"},{"location":"NOTES/rust/Ownership/#string","title":"String \u7c7b\u578b","text":"<p>\u57fa\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u521b\u5efa\u4e00\u4e2a String \u53d8\u91cf\uff0c\u5982\u4e0b\uff1a <pre><code>let s = String::from(\"hello\");\n</code></pre></p>"},{"location":"NOTES/rust/Ownership/#_4","title":"\u5185\u5b58\u4e0e\u5206\u914d","text":"<p>\u5176\u5185\u5b58\u5206\u914d\u5728\u5806\u4e0a\uff0c\u6240\u4ee5\u80fd\u591f\u5b58\u50a8\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u6587\u672c\u3002 <pre><code>fn main() {\n    {\n        let s = String::from(\"hello\"); // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684\n        // \u4f7f\u7528 s\n    }                                  // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c\n                                       // s \u4e0d\u518d\u6709\u6548\n}\n</code></pre></p>"},{"location":"NOTES/rust/Ownership/#move","title":"\u79fb\u52a8 (move)","text":"<p><pre><code>let s1 = String::from(\"hello\");\nlet s2 = s1;\n</code></pre> \u5728 <code>let s2 = s1</code> \u4e2d\uff0c\u5148\u5c06 s1 \u5728\u5185\u5b58\u4e2d\u7684\u503c\u7684\u6307\u9488\u62ff\u7ed9 s2\uff0c\u7136\u540e s1 \u4e0d\u518d\u6709\u6548\uff0c\u56e0\u6b64 Rust \u4e0d\u9700\u8981\u5728 s1 \u79bb\u5f00\u4f5c\u7528\u57df\u540e\u6e05\u7406\u4efb\u4f55\u4e1c\u897f\u3002  \u9075\u5faa <code>\u6240\u6709\u6743\u89c4\u5219</code> \u4e2d\u7684\u7b2c\u4e8c\u6761</p>"},{"location":"NOTES/rust/Ownership/#clone","title":"\u514b\u9686 (clone)","text":"<p><pre><code>let s1 = String::from(\"hello\");\nlet s2 = s1.clone();\n</code></pre> \u5728 <code>let s2 = s1.clone()</code> \u4e2d\uff0cs2 \u4f1a\u514b\u9686\u4e00\u4efd s1 \u7684\u503c\uff0c\u6b64\u540e s1 \u548c s2 \u90fd\u662f\u6709\u6548\u7684\u3002</p>"},{"location":"NOTES/rust/Ownership/#copy","title":"\u62f7\u8d1d (copy)","text":"<p>\u53ea\u5728\u6808\u4e0a\u7684\u6570\u636e\u53ef\u4ee5\u5feb\u901f\u62f7\u8d1d\u3002\u5373\u5728\u53d8\u91cf\u8d4b\u503c\u65f6\u4e0d\u4f1a\u53d1\u751f\u79fb\u52a8\u3002</p>"},{"location":"NOTES/rust/Ownership/#_5","title":"\u6240\u6709\u6743\u4e0e\u51fd\u6570","text":"<pre><code>fn main() {\n  let s1 = String::from(\"hello\");   // s1 \u8fdb\u5165\u4f5c\u7528\u57df\n  let s2 = pass_ownership(s1);     // s1 \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u91cc\uff0c\u7136\u540e\u53c8\u4ece\u51fd\u6570\u5185\u8fd4\u56de\u79fb\u52a8\u7ed9 s2\n                                    // s1 \u5230\u8fd9\u91cc\u4e0d\u518d\u6709\u6548\n}\nfn pass_ownership(_str: String) -&gt; String{\n  _str    // _str \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u5916\n}\n</code></pre>"},{"location":"NOTES/rust/Ownership/#_6","title":"\u5f15\u7528\u4e0e\u501f\u7528","text":"<p><pre><code>fn main() {\n  let s1 = String::from(\"hello\");\n  let len = length(&amp;s1);\n  println!(\"Length of '{}': {}\", s1, len);\n}\nfn length(s: &amp;String) -&gt; usize {\n  s.len()\n}\n</code></pre> \u4f7f\u7528 \u5f15\u7528 (reference) \u4f5c\u4e3a\u53c2\u6570\u65f6\u4e0d\u4f1a\u53d1\u751f\u6240\u6709\u6743\u7684\u8f6c\u79fb\u3002 Rust \u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528 (borrowing) \u9ed8\u8ba4\u5f15\u7528\u4e0d\u5141\u8bb8\u4fee\u6539\u5f15\u7528\u7684\u503c</p>"},{"location":"NOTES/rust/Ownership/#_7","title":"\u53ef\u53d8\u5f15\u7528","text":"<pre><code>fn main() {\n    let mut s = String::from(\"hello\");\n\n    change(&amp;mut s);\n}\nfn change(some_string: &amp;mut String) {\n    some_string.push_str(\", world\");\n}\n</code></pre>"},{"location":"NOTES/rust/Ownership/#_8","title":"\u5f15\u7528\u7684\u89c4\u5219","text":"<ul> <li>\u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002</li> <li>\u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684</li> </ul>"},{"location":"NOTES/rust/Ownership/#slice","title":"Slice \u7c7b\u578b","text":"<p>slice \u5141\u8bb8\u4f60\u5f15\u7528\u96c6\u5408\u4e2d\u4e00\u6bb5\u8fde\u7eed\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u800c\u4e0d\u7528\u5f15\u7528\u6574\u4e2a\u96c6\u5408\u3002slice \u662f\u4e00\u7c7b\u5f15\u7528\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u6240\u6709\u6743\u3002 \u8003\u8651\u4e0b\u9762\u4e00\u4e2a\u7a0b\u5e8f\uff1a <pre><code>// \u8fd4\u56de\u4e00\u4e2a\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u7d22\u5f15\nfn first_word(s: &amp;String) -&gt; usize {\n    let bytes = s.as_bytes();\n\n    for (i, &amp;item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\nfn main() {\n    let mut s = String::from(\"hello world\");\n\n    let word = first_word(&amp;s); // word \u7684\u503c\u4e3a 5\n\n    s.clear(); // \u8fd9\u6e05\u7a7a\u4e86\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176\u7b49\u4e8e \"\"\n\n    // word \u5728\u6b64\u5904\u7684\u503c\u4ecd\u7136\u662f 5\uff0c\n    // \u4f46\u662f\u6ca1\u6709\u66f4\u591a\u7684\u5b57\u7b26\u4e32\u8ba9\u6211\u4eec\u53ef\u4ee5\u6709\u6548\u5730\u5e94\u7528\u6570\u503c 5\u3002word \u7684\u503c\u73b0\u5728\u5b8c\u5168\u65e0\u6548\uff01\n}\n</code></pre> \u53ef\u4ee5\u7528 <code>\u5b57\u7b26\u4e32 slice</code> \u89e3\u51b3</p>"},{"location":"NOTES/rust/Ownership/#slice_1","title":"\u5b57\u7b26\u4e32 slice","text":"<pre><code>let s = String::from(\"hello world\");\n\nlet slice1 = &amp;s[..];    // \u6574\u4e2a\u5207\u7247\nlet slice2 = &amp;s[3..];   // \u4ece\u7b2c3\u4e2a\u5b57\u7b26\u5f00\u59cb\u5230\u6700\u540e\nlet slice3 = &amp;s[..3];   // \u4ece\u7b2c0\u4e2a\u5b57\u7b26\u5230\u7b2c3\u4e2a\u5b57\u7b26\nlet slice4 = &amp;s[3..5];  // \u4ece\u7b2c3\u4e2a\u5b57\u7b26\u5230\u7b2c5\u4e2a\u5b57\u7b26\n</code></pre> <p>\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u5b57\u7b26\u4e32 slice \u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898 <pre><code>fn first_word(s: &amp;String) -&gt; &amp;str {\n    let bytes = s.as_bytes();\n\n    for (i, &amp;item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &amp;s[0..i];\n        }\n    }\n\n    &amp;s[..]\n}\n\nfn main() {\n    let mut s = String::from(\"hello world\");\n\n    let word = first_word(&amp;s);\n\n    s.clear(); // \u9519\u8bef!\n\n    println!(\"the first word is: {}\", word);\n}\n</code></pre></p>"},{"location":"NOTES/rust/Ownership/#slice_2","title":"\u5176\u4ed6\u7c7b\u578b\u7684 slice","text":"<pre><code>fn main() {\n  let a = [1, 2, 3, 4, 5];\n\n  let slice = &amp;a[1..3];\n}\n</code></pre>"},{"location":"NOTES/rust/Packages-crates-modules/","title":"Package, creates and module","text":""},{"location":"NOTES/rust/Packages-crates-modules/#crate","title":"\u5305\u548c Crate","text":""},{"location":"NOTES/rust/Packages-crates-modules/#crate_1","title":"crate","text":"<ul> <li>crate \u662f Rust \u5728\u7f16\u8bd1\u65f6\u6700\u5c0f\u7684\u4ee3\u7801\u5355\u4f4d\u3002</li> <li>\u5355\u4e2a <code>.rs</code> \u6587\u4ef6\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a crate \u3002</li> <li>crate \u53ef\u4ee5\u5305\u542b\u6a21\u5757\uff0c\u6a21\u5757\u53ef\u4ee5\u5b9a\u4e49\u5728\u5176\u4ed6\u6587\u4ef6\uff0c\u7136\u540e\u548c crate \u4e00\u8d77\u7f16\u8bd1\u3002  </li> </ul> <p>crate \u6709\u4e24\u7c7b\uff1a   </p> <ol> <li>\u4e8c\u8fdb\u5236\u9879   \u4e8c\u8fdb\u5236\u9879 \u53ef\u4ee5\u88ab\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u6bd4\u5982\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\u6216\u8005\u4e00\u4e2a\u670d\u52a1\u5668\u3002\u5b83\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a <code>main</code> \u51fd\u6570\u6765\u5b9a\u4e49\u5f53\u7a0b\u5e8f\u88ab\u6267\u884c\u7684\u65f6\u5019\u6240\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002</li> <li>\u5e93   \u5e93 \u5e76\u6ca1\u6709 main \u51fd\u6570\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e00\u4e9b\u8bf8\u5982\u51fd\u6570\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u4f7f\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u4f7f\u7528\u8fd9\u4e9b\u4e1c\u897f\u3002</li> </ol> <p>crate root \u662f\u4e00\u4e2a\u6e90\u6587\u4ef6\uff0cRust \u7f16\u8bd1\u5668\u4ee5\u5b83\u4e3a\u8d77\u59cb\u70b9\uff0c\u5e76\u6784\u6210\u4f60\u7684 crate \u7684\u6839\u6a21\u5757  </p>"},{"location":"NOTES/rust/Packages-crates-modules/#package","title":"package","text":"<ul> <li>\u5305\uff08package\uff09 \u662f\u63d0\u4f9b\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a crate\u3002\u4e00\u4e2a\u5305\u4f1a\u5305\u542b\u4e00\u4e2a Cargo.toml \u6587\u4ef6\uff0c\u9610\u8ff0\u5982\u4f55\u53bb\u6784\u5efa\u8fd9\u4e9b crate\u3002Cargo \u5c31\u662f\u4e00\u4e2a\u5305\u542b\u6784\u5efa\u4f60\u4ee3\u7801\u7684\u4e8c\u8fdb\u5236\u9879\u7684\u5305\u3002</li> <li>\u5305\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a crate, \u4f46\u81f3\u591a\u5305\u542b\u4e00\u4e2a\u5e93 crate(library crate)\u3002</li> </ul> <p>\u5f53\u6211\u4eec\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u65f6\uff1a <pre><code>$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n</code></pre> \u5728\u6b64\uff0c\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u53ea\u5305\u542b src/main.rs \u7684\u5305\uff0c\u610f\u5473\u7740\u5b83\u53ea\u542b\u6709\u4e00\u4e2a\u540d\u4e3a my-project \u7684\u4e8c\u8fdb\u5236 crate\u3002 \u5982\u679c\u4e00\u4e2a\u5305\u540c\u65f6\u542b\u6709 src/main.rs \u548c src/lib.rs\uff0c\u5219\u5b83\u6709\u4e24\u4e2a crate\uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u548c\u4e00\u4e2a\u5e93\u7684\uff0c\u4e14\u540d\u5b57\u90fd\u4e0e\u5305\u76f8\u540c\u3002 \u901a\u8fc7\u5c06\u6587\u4ef6\u653e\u5728 src/bin \u76ee\u5f55\u4e0b\uff0c\u4e00\u4e2a\u5305\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e8c\u8fdb\u5236 crate\uff1a\u6bcf\u4e2a src/bin \u4e0b\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u4e8c\u8fdb\u5236 crate\u3002</p>"},{"location":"NOTES/rust/Packages-crates-modules/#_1","title":"\u5b9a\u4e49\u6a21\u5757\u6765\u63a7\u5236\u4f5c\u7528\u57df\u4e0e\u79c1\u6709\u6027","text":""},{"location":"NOTES/rust/Packages-crates-modules/#_2","title":"\u6a21\u5757\u89c4\u5219","text":"<ul> <li>\u4ececrate\u6839\u8282\u70b9\u5f00\u59cb: \u5f53\u7f16\u8bd1\u4e00\u4e2acrate, \u7f16\u8bd1\u5668\u9996\u5148\u5728crate\u6839\u6587\u4ef6\uff08\u901a\u5e38\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e93crate\u800c\u8a00\u662fsrc/lib.rs\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236crate\u800c\u8a00\u662fsrc/main.rs\uff09\u4e2d\u5bfb\u627e\u9700\u8981\u88ab\u7f16\u8bd1\u7684\u4ee3\u7801\u3002</li> <li>\u58f0\u660e\u6a21\u5757: \u5728crate\u6839\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u65b0\u6a21\u5757\uff1b\u6bd4\u5982\uff0c\u4f60\u7528mod garden\u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505agarden\u7684\u6a21\u5757\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4e0b\u5217\u8def\u5f84\u4e2d\u5bfb\u627e\u6a21\u5757\u4ee3\u7801\uff1a<ul> <li>\u5185\u8054\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53mod garden\u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7</li> <li>\u5728\u6587\u4ef6 src/garden.rs</li> <li>\u5728\u6587\u4ef6 src/garden/mod.rs</li> </ul> </li> <li>\u58f0\u660e\u5b50\u6a21\u5757: \u5728\u9664\u4e86crate\u6839\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u5b50\u6a21\u5757\u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u80fd\u5728src/garden.rs\u4e2d\u5b9a\u4e49\u4e86mod vegetables;\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4ee5\u7236\u6a21\u5757\u547d\u540d\u7684\u76ee\u5f55\u4e2d\u5bfb\u627e\u5b50\u6a21\u5757\u4ee3\u7801\uff1a<ul> <li>\u5185\u8054, \u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53mod vegetables\u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7</li> <li>\u5728\u6587\u4ef6 src/garden/vegetables.rs</li> <li>\u5728\u6587\u4ef6 src/garden/vegetables/mod.rs</li> </ul> </li> <li>\u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u8def\u5f84: \u4e00\u65e6\u4e00\u4e2a\u6a21\u5757\u662f\u4f60crate\u7684\u4e00\u90e8\u5206\uff0c \u4f60\u53ef\u4ee5\u5728\u9690\u79c1\u89c4\u5219\u5141\u8bb8\u7684\u524d\u63d0\u4e0b\uff0c\u4ece\u540c\u4e00\u4e2acrate\u5185\u7684\u4efb\u610f\u5730\u65b9\uff0c\u901a\u8fc7\u4ee3\u7801\u8def\u5f84\u5f15\u7528\u8be5\u6a21\u5757\u7684\u4ee3\u7801\u3002\u4e3e\u4f8b\u800c\u8a00\uff0c\u4e00\u4e2agarden vegetables\u6a21\u5757\u4e0b\u7684Asparagus\u7c7b\u578b\u53ef\u4ee5\u5728crate::garden::vegetables::Asparagus\u88ab\u627e\u5230\u3002</li> <li>\u79c1\u6709 vs \u516c\u7528: \u4e00\u4e2a\u6a21\u5757\u91cc\u7684\u4ee3\u7801\u9ed8\u8ba4\u5bf9\u5176\u7236\u6a21\u5757\u79c1\u6709\u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u6a21\u5757\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u65f6\u4f7f\u7528pub mod\u66ff\u4ee3mod\u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u516c\u7528\u6a21\u5757\u5185\u90e8\u7684\u6210\u5458\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u524d\u4f7f\u7528pub\u3002</li> <li>use \u5173\u952e\u5b57: \u5728\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0cuse\u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u6210\u5458\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u6765\u51cf\u5c11\u957f\u8def\u5f84\u7684\u91cd\u590d\u3002\u5728\u4efb\u4f55\u53ef\u4ee5\u5f15\u7528crate::garden::vegetables::Asparagus\u7684\u4f5c\u7528\u57df, \u4f60\u53ef\u4ee5\u901a\u8fc7 use crate::garden::vegetables::Asparagus;\u521b\u5efa\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4f5c\u7528\u57df\u4e2d\u53ea\u5199Asparagus\u6765\u4f7f\u7528\u8be5\u7c7b\u578b\u3002</li> </ul> <p>\u4e0b\u9762\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>backyard</code> \u7684 crate \u6765\u8bf4\u660e\u8fd9\u4e9b\u89c4\u5219\u3002 \u8fd9\u662f\u6587\u4ef6\u76ee\u5f55\u6811\uff1a <pre><code>backyard\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 garden\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 vegetables.rs\n    \u251c\u2500\u2500 garden.rs\n    \u2514\u2500\u2500 main.rs\n</code></pre> \u6587\u4ef6\u540d\uff1asrc/main.rs <pre><code>use crate::garden::vegetables::Asparagus;\n\npub mod garden;\n\nfn main() {\n  let plant = Asparagus {\n    weigth: 1.2,\n  };\n  println!(\"I'm growing {:?}!\", plant);\n}\n</code></pre> \u6587\u4ef6\u540d\uff1asrc/garden.rs <pre><code>pub mod vegetables;\n</code></pre> \u6587\u4ef6\u540d\uff1asrc/garden/vegetables.rs <pre><code>#[derive(Debug)]\npub struct Asparagus {\n  pub weigth: f64,\n}\n</code></pre></p>"},{"location":"NOTES/rust/Packages-crates-modules/#_3","title":"\u5728\u6a21\u5757\u4e2d\u5bf9\u76f8\u5173\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4","text":"<p>\u80cc\u666f\uff1a \u5728\u9910\u996e\u4e1a\uff0c\u9910\u9986\u4e2d\u4f1a\u6709\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u524d\u53f0\uff08front of house\uff09\uff0c\u8fd8\u6709\u53e6\u5916\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u540e\u53f0\uff08back of house\uff09\u3002\u524d\u53f0\u662f\u62db\u5f85\u987e\u5ba2\u7684\u5730\u65b9\uff0c\u5728\u8fd9\u91cc\uff0c\u5e97\u4e3b\u53ef\u4ee5\u4e3a\u987e\u5ba2\u5b89\u6392\u5ea7\u4f4d\uff0c\u670d\u52a1\u5458\u63a5\u53d7\u987e\u5ba2\u4e0b\u5355\u548c\u4ed8\u6b3e\uff0c\u8c03\u9152\u5e08\u4f1a\u5236\u4f5c\u996e\u54c1\u3002\u540e\u53f0\u5219\u662f\u7531\u53a8\u5e08\u5de5\u4f5c\u7684\u53a8\u623f\uff0c\u6d17\u7897\u5de5\u7684\u5de5\u4f5c\u5730\u70b9\uff0c\u4ee5\u53ca\u7ecf\u7406\u505a\u884c\u653f\u5de5\u4f5c\u7684\u5730\u65b9\u7ec4\u6210\u3002 \u6587\u4ef6\u540d\uff1asrc/lib.rs <pre><code>mod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n\n        fn seat_at_table() {}\n    }\n\n    mod serving {\n        fn take_order() {}\n\n        fn serve_order() {}\n\n        fn take_payment() {}\n    }\n}\n</code></pre></p> <p>\u6a21\u5757\u6811\uff1a <pre><code>crate\n \u2514\u2500\u2500 front_of_house\n     \u251c\u2500\u2500 hosting\n     \u2502   \u251c\u2500\u2500 add_to_waitlist\n     \u2502   \u2514\u2500\u2500 seat_at_table\n     \u2514\u2500\u2500 serving\n         \u251c\u2500\u2500 take_order\n         \u251c\u2500\u2500 serve_order\n         \u2514\u2500\u2500 take_payment\n</code></pre></p>"},{"location":"NOTES/rust/Packages-crates-modules/#_4","title":"\u5f15\u7528\u6a21\u5757\u9879\u76ee\u7684\u8def\u5f84","text":"<p>\u8def\u5f84\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a</p> <ul> <li>\u7edd\u5bf9\u8def\u5f84\uff08absolute path\uff09\u4ece crate \u6839\u5f00\u59cb\uff0c\u4ee5 crate \u540d\u6216\u8005\u5b57\u9762\u503c crate \u5f00\u5934\u3002</li> <li>\u76f8\u5bf9\u8def\u5f84\uff08relative path\uff09\u4ece\u5f53\u524d\u6a21\u5757\u5f00\u59cb\uff0c\u4ee5 self\u3001super \u6216\u5f53\u524d\u6a21\u5757\u7684\u6807\u8bc6\u7b26\u5f00\u5934\u3002</li> </ul> <p>\u4f8b\u5982\uff1a \u6587\u4ef6\u540d\uff1asrc/lib.rs <pre><code>mod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // \u7edd\u5bf9\u8def\u5f84\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // \u76f8\u5bf9\u8def\u5f84\n    front_of_house::hosting::add_to_waitlist();\n}\n</code></pre></p>"},{"location":"NOTES/rust/Packages-crates-modules/#pub","title":"\u4f7f\u7528 pub \u5173\u952e\u5b57\u66b4\u9732\u8def\u5f84","text":"<p>\u4e0a\u8ff0\u4ee3\u7801\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u539f\u56e0\u662f\u6a21\u5757 <code>front_of_house</code> \u4e0b\u7684 <code>hosting</code> \u6a21\u5757\u9ed8\u8ba4\u662f\u79c1\u6709\u7684\uff0c\u5e76\u4e14 <code>add_to_waitlist</code> \u51fd\u6570\u9ed8\u8ba4\u4e5f\u662f\u79c1\u6709\u7684\uff0c\u6211\u4eec\u9700\u8981\u5728\u5176\u524d\u9762\u6dfb\u52a0 <code>pub</code> \u5173\u952e\u5b57\uff0c\u4f7f\u5176\u53d8\u6210\u516c\u6709\u7684\u3002 <pre><code>mod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // \u7edd\u5bf9\u8def\u5f84\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // \u76f8\u5bf9\u8def\u5f84\n    front_of_house::hosting::add_to_waitlist();\n}\n</code></pre></p>"},{"location":"NOTES/rust/Packages-crates-modules/#super","title":"\u4f7f\u7528 super \u8d77\u59cb\u7684\u5173\u952e\u5b57","text":"<p>\u7c7b\u4f3c\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4ee5 <code>..</code> \u5f00\u5934\u7684\u8bed\u6cd5\u3002</p>"},{"location":"NOTES/rust/Packages-crates-modules/#_5","title":"\u7ed3\u6784\u4f53\u548c\u679a\u4e3e","text":"<ul> <li>\u7ed3\u6784\u4f53\u4e2d\u7684\u6210\u5458\u9ed8\u8ba4\u79c1\u6709\u3002  </li> <li>\u679a\u4e3e\u4e2d\u7684\u6210\u5458\u9ed8\u8ba4\u5171\u6709\u3002</li> </ul>"},{"location":"NOTES/rust/Packages-crates-modules/#use","title":"use \u4f7f\u7528","text":"<p><code>use</code> \u5173\u952e\u5b57\u53ef\u4ee5\u5c06\u6307\u5b9a\u8def\u5f84\u5f15\u5165\u4f5c\u7528\u57df\uff08scope\uff09\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u8def\u5f84\u4e2d\u7684\u9879\u3002 \u4f7f\u7528 use \u5f15\u5165\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u548c\u5176\u4ed6\u9879\u65f6\uff0c\u4e60\u60ef\u662f\u6307\u5b9a\u5b83\u4eec\u7684\u5b8c\u6574\u8def\u5f84\u3002\u4f8b\u5982\uff1a <pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(1, 2);\n}\n</code></pre></p>"},{"location":"NOTES/rust/Packages-crates-modules/#as","title":"\u4f7f\u7528 as \u5173\u952e\u5b57\u63d0\u4f9b\u65b0\u7684\u540d\u79f0","text":"<pre><code>use std::fmt::Result;\nuse std::io::Result as IoResult;\n\nfn function1() -&gt; Result {\n    // --snip--\n    Ok(())\n}\n\nfn function2() -&gt; IoResult&lt;()&gt; {\n    // --snip--\n    Ok(())\n}\n</code></pre>"},{"location":"NOTES/rust/Packages-crates-modules/#pub-use","title":"\u4f7f\u7528 pub use \u91cd\u5bfc\u51fa\u540d\u79f0","text":"<p>\u901a\u8fc7 pub use \u4f7f\u540d\u79f0\u53ef\u4ece\u65b0\u4f5c\u7528\u57df\u4e2d\u88ab\u5bfc\u5165\u81f3\u4efb\u4f55\u4ee3\u7801\u3002 <pre><code>mod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n</code></pre></p>"},{"location":"NOTES/rust/Packages-crates-modules/#use_1","title":"\u5d4c\u5957\u8def\u5f84\u6765\u6d88\u9664\u5927\u91cf\u7684 use \u884c","text":"<pre><code>// --snip--\nuse std::{cmp::Ordering, io};\n// --snip--\n</code></pre>"},{"location":"NOTES/rust/Packages-crates-modules/#glob","title":"glob \u8fd0\u7b97\u7b26","text":"<p>\u5982\u679c\u5e0c\u671b\u5c06\u4e00\u4e2a\u8def\u5f84\u4e0b \u6240\u6709 \u516c\u6709\u9879\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u53ef\u4ee5\u6307\u5b9a\u8def\u5f84\u540e\u8ddf *\uff0cglob \u8fd0\u7b97\u7b26\uff1a <pre><code>use std::collections::*;\n</code></pre></p>"},{"location":"NOTES/rust/Structs/","title":"Struct","text":""},{"location":"NOTES/rust/Structs/#_1","title":"\u7ed3\u6784\u4f53\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316","text":""},{"location":"NOTES/rust/Structs/#_2","title":"\u5b9a\u4e49","text":"<p><pre><code>struct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n</code></pre> \u7ed3\u6784\u4f53\u4e2d\u7531\u6570\u636e\u7684\u540d\u5b57\u548c\u7c7b\u578b\u7ec4\u6210\uff0c\u6211\u4eec\u79f0\u4e3a \u5b57\u6bb5 (field)\u3002</p>"},{"location":"NOTES/rust/Structs/#_3","title":"\u5b9e\u4f8b\u5316","text":"<p><pre><code>fn main() {\n    let mut user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };\n    let email = user1.email;  // \u4f7f\u7528 '.' \u8bbf\u95ee\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\n}\n</code></pre> \u6ce8\u610f\uff0crust\u5e76\u4e0d\u5141\u8bb8\u53ea\u5c06\u5355\u4e2a\u5b57\u6bb5\u6807\u8bb0\u4e3a\u53ef\u53d8\uff0c\u5fc5\u987b\u6574\u4e2a\u793a\u4f8b\u662f\u53ef\u53d8\u7684\u3002</p>"},{"location":"NOTES/rust/Structs/#_4","title":"\u4f7f\u7528\u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5","text":"<pre><code>fn build_user(email: String, username: String) -&gt; User {\n    User {\n        email,      // \u5b57\u6bb5 email \u548c\u53c2\u6570 email \u76f8\u540c\uff0c\u53ef\u4ee5\u7b80\u5199\n        username,\n        active: true,\n        sign_in_count: 1,\n    }\n}\n</code></pre>"},{"location":"NOTES/rust/Structs/#_5","title":"\u4f7f\u7528\u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5\u5b9e\u4f8b","text":"<p>\u4e0d\u4f7f\u7528\u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5\uff1a <pre><code>fn main() {\n    let user2 = User {\n        active: user1.active,\n        username: user1.username,\n        email: String::from(\"another@example.com\"),\n        sign_in_count: user1.sign_in_count,\n    };\n}\n</code></pre> \u4f7f\u7528\u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5\uff1a <pre><code>fn main() {\n    let user2 = User {\n        email: String::from(\"another@example.com\"),\n        ..user1\n    };\n}\n</code></pre> \u6ce8\u610f\uff0c\u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5\u4f1a\u53d1\u751f\u662f\u6240\u6709\u6743\u8f6c\u79fb\u3002</p>"},{"location":"NOTES/rust/Structs/#_6","title":"\u5143\u7ec4\u7ed3\u6784\u4f53","text":"<p>\u5143\u7ec4\u7ed3\u6784\u4f53 (tuple structs) \u6ca1\u6709\u5b57\u6bb5\u540d\u3002 <pre><code>struct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n</code></pre></p>"},{"location":"NOTES/rust/Structs/#_7","title":"\u7c7b\u5355\u5143\u7ed3\u6784\u4f53","text":"<p>\u7c7b\u5355\u5143\u7ed3\u6784\u4f53 (unit-like structs) \u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u3002 \u7c7b\u5355\u5143\u7ed3\u6784\u4f53\u5e38\u5e38\u5728\u4f60\u60f3\u8981\u5728\u67d0\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u4f46\u4e0d\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\u53d1\u6325\u4f5c\u7528\u3002 <pre><code>struct AlwaysEqual;\n\nfn main() {\n    let subject = AlwaysEqual;\n}\n</code></pre></p>"},{"location":"NOTES/rust/Structs/#_8","title":"\u7ed3\u6784\u4f53\u793a\u4f8b","text":"<pre><code>struct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(&amp;rect1)\n    );\n}\n\nfn area(rectangle: &amp;Rectangle) -&gt; u32 {\n    rectangle.width * rectangle.height\n}\n</code></pre>"},{"location":"NOTES/rust/Structs/#trait","title":"\u901a\u8fc7\u6d3e\u751f trait \u589e\u52a0\u529f\u80fd","text":"<p><pre><code>  -- snip --\n  println!(\"rect1 is {}\", rect1);   // \u5c1d\u8bd5\u6253\u5370 rect1\uff0c\u7f16\u8bd1\u62a5\u9519\n</code></pre> \u6b63\u786e\u6253\u5370\u65b9\u6cd5\u5982\u4e0b\uff1a <pre><code>#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {:?}\", rect1);\n}\n</code></pre> \u5728 <code>{}</code> \u4e2d\u52a0\u5165 <code>:?</code> \u6307\u793a\u7b26\u544a\u8bc9 <code>println!</code> \u6211\u4eec\u60f3\u8981\u4f7f\u7528\u53eb\u505a <code>Debug</code> \u7684\u8f93\u51fa\u683c\u5f0f\u3002 \u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e4b\u524d\u52a0\u4e0a\u5916\u90e8\u5c5e\u6027 <code>#[derive(Debug)]</code>\uff0c\u4ee5\u6b64\u4e3a\u7ed3\u6784\u4f53\u663e\u5f0f\u9009\u62e9\u6253\u5370\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u529f\u80fd\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528 <code>{:#?}</code> \u66ff\u6362 <code>println!</code> \u5b57\u7b26\u4e32\u4e2d\u7684 <code>{:?}</code>\uff0c\u6253\u5370\u7ed3\u679c\u5982\u4e0b\uff1a <pre><code>$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/rectangles`\nrect1 is Rectangle {\n    width: 30,\n    height: 50,\n}\n</code></pre></p> <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528 <code>dbg!</code> \u5b8f\u6765\u6253\u5370\u6570\u503c\u5982\uff1a<code>dbg!(&amp;rect1)</code>\u3002</p>"},{"location":"NOTES/rust/Structs/#_9","title":"\u65b9\u6cd5","text":""},{"location":"NOTES/rust/Structs/#_10","title":"\u5b9a\u4e49\u65b9\u6cd5","text":"<p><pre><code>struct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n</code></pre> \u5728 <code>area</code> \u7684\u7b7e\u540d\u4e2d\uff0c\u4f7f\u7528 <code>&amp;self</code> \u6765\u66ff\u4ee3 <code>rectangle: &amp;Rectangle</code>\uff0c<code>&amp;self</code> \u5b9e\u9645\u4e0a\u662f <code>self: &amp;Self</code> \u7684\u7f29\u5199\u3002\u5728\u4e00\u4e2a <code>impl</code> \u5757\u4e2d\uff0c<code>Self</code> \u7c7b\u578b\u662f <code>impl</code> \u5757\u7684\u7c7b\u578b\u7684\u522b\u540d\u3002\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a self \u7684Self \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u901a\u5e38\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u5982\u6b64\uff0c\u4e0e\u5b57\u6bb5\u540c\u540d\u7684\u65b9\u6cd5\u5c06\u88ab\u5b9a\u4e49\u4e3a\u53ea\u8fd4\u56de\u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\u800c\u4e0d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\u8fd9\u6837\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a getters\u3002\u4f8b\u5982\uff1a <pre><code>-- snip --\nimpl Rectangle {\n  -- snip --\n  fn width() -&gt; u32 {\n    width\n  }\n}\n</code></pre></p>"},{"location":"NOTES/rust/Structs/#_11","title":"\u5173\u8054\u51fd\u6570","text":"<p>\u6240\u6709\u5728 <code>impl</code> \u5757\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u88ab\u79f0\u4e3a \u5173\u8054\u51fd\u6570 (associated functions)\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e <code>impl</code> \u540e\u9762\u7684\u7c7b\u578b\u76f8\u5173\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e0d\u4ee5 self \u4e3a\u7b2c\u4e00\u53c2\u6570\u7684\u5173\u8054\u51fd\u6570\uff0c\u4f8b\u5982 <code>String::from</code> \u51fd\u6570\u3002 <pre><code>impl Rectangle {\n    fn square(size: u32) -&gt; Self {\n        Self {\n            width: size,\n            height: size,\n        }\n    }\n}\nfn main() {\n  let sq = Rectangle::square(3);\n}\n</code></pre></p>"},{"location":"NOTES/rust/Structs/#impl","title":"\u591a\u4e2a impl \u5757","text":"<p>\u6bcf\u4e2a\u7ed3\u6784\u4f53\u90fd\u5141\u8bb8\u62e5\u6709\u591a\u4e2a <code>impl</code> \u5757\u3002</p>"}]}